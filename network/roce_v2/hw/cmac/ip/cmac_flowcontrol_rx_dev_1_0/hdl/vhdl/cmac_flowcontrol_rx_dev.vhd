-- ==============================================================
-- RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2020.2 (64-bit)
-- Version: 2020.2
-- Copyright (C) Copyright 1986-2020 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity cmac_flowcontrol_rx_dev is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    drop_err : IN STD_LOGIC_VECTOR (0 downto 0);
    drop_nrdy : IN STD_LOGIC_VECTOR (0 downto 0);
    drop_err_cnt_o : OUT STD_LOGIC_VECTOR (31 downto 0);
    drop_nrdy_cnt_o : OUT STD_LOGIC_VECTOR (31 downto 0);
    cmac_pfc_val : IN STD_LOGIC_VECTOR (8 downto 0);
    cmac_tx_pause_req_o : OUT STD_LOGIC_VECTOR (8 downto 0);
    cmac_tx_pause_req_o_ap_vld : OUT STD_LOGIC;
    fifo_rx_max : IN STD_LOGIC_VECTOR (31 downto 0);
    fifo_rx_min : IN STD_LOGIC_VECTOR (31 downto 0);
    fifo_rx_rd_data_count : IN STD_LOGIC_VECTOR (31 downto 0);
    state_o : OUT STD_LOGIC_VECTOR (31 downto 0) );
end;


architecture behav of cmac_flowcontrol_rx_dev is 
    attribute CORE_GENERATION_INFO : STRING;
    attribute CORE_GENERATION_INFO of behav : architecture is
    "cmac_flowcontrol_rx_dev_cmac_flowcontrol_rx_dev,hls_ip_2020_2,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xcu200-fsgd2104-2-e,HLS_INPUT_CLOCK=3.000000,HLS_INPUT_ARCH=pipeline,HLS_SYN_CLOCK=1.368000,HLS_SYN_LAT=0,HLS_SYN_TPT=1,HLS_SYN_MEM=0,HLS_SYN_DSP=0,HLS_SYN_FF=66,HLS_SYN_LUT=146,HLS_VERSION=2020_2}";
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv9_0 : STD_LOGIC_VECTOR (8 downto 0) := "000000000";
    constant ap_const_boolean_1 : BOOLEAN := true;

    signal drop_err_cnt_V : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    signal drpn_nrdy_cnt_V : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    signal rx_state : STD_LOGIC_VECTOR (0 downto 0) := "0";
    signal ap_phi_mux_p_b12_phi_fu_133_p8 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm : STD_LOGIC_VECTOR (0 downto 0) := "1";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal rx_state_load_load_fu_207_p1 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln878_fu_223_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln882_fu_211_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_phi_mux_cmac_flowcontrol_rx_dev_ap_uint_1_ap_uint_1_ap_uint_32_ap_uint_32_ap_uint_9_ap_uint_9_ap_uint_32_ap_uint_32_ap_uint_32_int_cmac_tx_pause_req_phi_fu_150_p8 : STD_LOGIC_VECTOR (8 downto 0);
    signal add_ln691_fu_173_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln691_1_fu_194_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal zext_ln691_fu_165_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal zext_ln691_1_fu_186_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_NS_fsm : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_ce_reg : STD_LOGIC;


begin




    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    rx_state_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state1)) then
                if (((icmp_ln878_fu_223_p2 = ap_const_lv1_1) and (rx_state_load_load_fu_207_p1 = ap_const_lv1_1))) then 
                    rx_state <= ap_const_lv1_0;
                elsif (((icmp_ln882_fu_211_p2 = ap_const_lv1_0) and (rx_state_load_load_fu_207_p1 = ap_const_lv1_0))) then 
                    rx_state <= ap_const_lv1_1;
                end if;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state1)) then
                drop_err_cnt_V <= add_ln691_fu_173_p2;
                drpn_nrdy_cnt_V <= add_ln691_1_fu_194_p2;
            end if;
        end if;
    end process;

    ap_NS_fsm_assign_proc : process (ap_CS_fsm)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                ap_NS_fsm <= ap_ST_fsm_state1;
            when others =>  
                ap_NS_fsm <= "X";
        end case;
    end process;
    add_ln691_1_fu_194_p2 <= std_logic_vector(unsigned(drpn_nrdy_cnt_V) + unsigned(zext_ln691_1_fu_186_p1));
    add_ln691_fu_173_p2 <= std_logic_vector(unsigned(drop_err_cnt_V) + unsigned(zext_ln691_fu_165_p1));
    ap_CS_fsm_state1 <= ap_CS_fsm(0);

    ap_phi_mux_cmac_flowcontrol_rx_dev_ap_uint_1_ap_uint_1_ap_uint_32_ap_uint_32_ap_uint_9_ap_uint_9_ap_uint_32_ap_uint_32_ap_uint_32_int_cmac_tx_pause_req_phi_fu_150_p8_assign_proc : process(cmac_pfc_val, ap_CS_fsm_state1, rx_state_load_load_fu_207_p1, icmp_ln878_fu_223_p2, icmp_ln882_fu_211_p2)
    begin
        if ((((icmp_ln878_fu_223_p2 = ap_const_lv1_0) and (rx_state_load_load_fu_207_p1 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state1)) or ((icmp_ln882_fu_211_p2 = ap_const_lv1_0) and (rx_state_load_load_fu_207_p1 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state1)))) then 
            ap_phi_mux_cmac_flowcontrol_rx_dev_ap_uint_1_ap_uint_1_ap_uint_32_ap_uint_32_ap_uint_9_ap_uint_9_ap_uint_32_ap_uint_32_ap_uint_32_int_cmac_tx_pause_req_phi_fu_150_p8 <= cmac_pfc_val;
        elsif ((((icmp_ln882_fu_211_p2 = ap_const_lv1_1) and (rx_state_load_load_fu_207_p1 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state1)) or ((icmp_ln878_fu_223_p2 = ap_const_lv1_1) and (rx_state_load_load_fu_207_p1 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state1)))) then 
            ap_phi_mux_cmac_flowcontrol_rx_dev_ap_uint_1_ap_uint_1_ap_uint_32_ap_uint_32_ap_uint_9_ap_uint_9_ap_uint_32_ap_uint_32_ap_uint_32_int_cmac_tx_pause_req_phi_fu_150_p8 <= ap_const_lv9_0;
        else 
            ap_phi_mux_cmac_flowcontrol_rx_dev_ap_uint_1_ap_uint_1_ap_uint_32_ap_uint_32_ap_uint_9_ap_uint_9_ap_uint_32_ap_uint_32_ap_uint_32_int_cmac_tx_pause_req_phi_fu_150_p8 <= "XXXXXXXXX";
        end if; 
    end process;


    ap_phi_mux_p_b12_phi_fu_133_p8_assign_proc : process(ap_CS_fsm_state1, rx_state_load_load_fu_207_p1, icmp_ln878_fu_223_p2, icmp_ln882_fu_211_p2)
    begin
        if ((((icmp_ln878_fu_223_p2 = ap_const_lv1_0) and (rx_state_load_load_fu_207_p1 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state1)) or ((icmp_ln882_fu_211_p2 = ap_const_lv1_0) and (rx_state_load_load_fu_207_p1 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state1)))) then 
            ap_phi_mux_p_b12_phi_fu_133_p8 <= ap_const_lv1_1;
        elsif ((((icmp_ln882_fu_211_p2 = ap_const_lv1_1) and (rx_state_load_load_fu_207_p1 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state1)) or ((icmp_ln878_fu_223_p2 = ap_const_lv1_1) and (rx_state_load_load_fu_207_p1 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state1)))) then 
            ap_phi_mux_p_b12_phi_fu_133_p8 <= ap_const_lv1_0;
        else 
            ap_phi_mux_p_b12_phi_fu_133_p8 <= "X";
        end if; 
    end process;

    cmac_tx_pause_req_o <= ap_phi_mux_cmac_flowcontrol_rx_dev_ap_uint_1_ap_uint_1_ap_uint_32_ap_uint_32_ap_uint_9_ap_uint_9_ap_uint_32_ap_uint_32_ap_uint_32_int_cmac_tx_pause_req_phi_fu_150_p8;

    cmac_tx_pause_req_o_ap_vld_assign_proc : process(ap_CS_fsm_state1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state1)) then 
            cmac_tx_pause_req_o_ap_vld <= ap_const_logic_1;
        else 
            cmac_tx_pause_req_o_ap_vld <= ap_const_logic_0;
        end if; 
    end process;

    drop_err_cnt_o <= std_logic_vector(unsigned(drop_err_cnt_V) + unsigned(zext_ln691_fu_165_p1));
    drop_nrdy_cnt_o <= std_logic_vector(unsigned(drpn_nrdy_cnt_V) + unsigned(zext_ln691_1_fu_186_p1));
    icmp_ln878_fu_223_p2 <= "1" when (unsigned(fifo_rx_rd_data_count) < unsigned(fifo_rx_min)) else "0";
    icmp_ln882_fu_211_p2 <= "1" when (unsigned(fifo_rx_rd_data_count) < unsigned(fifo_rx_max)) else "0";
    rx_state_load_load_fu_207_p1 <= rx_state;
    state_o <= std_logic_vector(IEEE.numeric_std.resize(unsigned(ap_phi_mux_p_b12_phi_fu_133_p8),32));
    zext_ln691_1_fu_186_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(drop_nrdy),32));
    zext_ln691_fu_165_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(drop_err),32));
end behav;

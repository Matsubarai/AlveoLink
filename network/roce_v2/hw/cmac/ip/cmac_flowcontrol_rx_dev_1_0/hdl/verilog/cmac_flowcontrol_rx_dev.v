// ==============================================================
// RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2020.2 (64-bit)
// Version: 2020.2
// Copyright (C) Copyright 1986-2020 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

(* CORE_GENERATION_INFO="cmac_flowcontrol_rx_dev_cmac_flowcontrol_rx_dev,hls_ip_2020_2,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xcu200-fsgd2104-2-e,HLS_INPUT_CLOCK=3.000000,HLS_INPUT_ARCH=pipeline,HLS_SYN_CLOCK=1.368000,HLS_SYN_LAT=0,HLS_SYN_TPT=1,HLS_SYN_MEM=0,HLS_SYN_DSP=0,HLS_SYN_FF=66,HLS_SYN_LUT=146,HLS_VERSION=2020_2}" *)

module cmac_flowcontrol_rx_dev (
        ap_clk,
        ap_rst,
        drop_err,
        drop_nrdy,
        drop_err_cnt_o,
        drop_nrdy_cnt_o,
        cmac_pfc_val,
        cmac_tx_pause_req_o,
        cmac_tx_pause_req_o_ap_vld,
        fifo_rx_max,
        fifo_rx_min,
        fifo_rx_rd_data_count,
        state_o
);

parameter    ap_ST_fsm_state1 = 1'd1;

input   ap_clk;
input   ap_rst;
input  [0:0] drop_err;
input  [0:0] drop_nrdy;
output  [31:0] drop_err_cnt_o;
output  [31:0] drop_nrdy_cnt_o;
input  [8:0] cmac_pfc_val;
output  [8:0] cmac_tx_pause_req_o;
output   cmac_tx_pause_req_o_ap_vld;
input  [31:0] fifo_rx_max;
input  [31:0] fifo_rx_min;
input  [31:0] fifo_rx_rd_data_count;
output  [31:0] state_o;

reg cmac_tx_pause_req_o_ap_vld;

reg   [31:0] drop_err_cnt_V;
reg   [31:0] drpn_nrdy_cnt_V;
reg   [0:0] rx_state;
reg   [0:0] ap_phi_mux_p_b12_phi_fu_133_p8;
(* fsm_encoding = "none" *) reg   [0:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
wire   [0:0] rx_state_load_load_fu_207_p1;
wire   [0:0] icmp_ln878_fu_223_p2;
wire   [0:0] icmp_ln882_fu_211_p2;
reg   [8:0] ap_phi_mux_cmac_flowcontrol_rx_dev_ap_uint_1_ap_uint_1_ap_uint_32_ap_uint_32_ap_uint_9_ap_uint_9_ap_uint_32_ap_uint_32_ap_uint_32_int_cmac_tx_pause_req_phi_fu_150_p8;
wire   [31:0] add_ln691_fu_173_p2;
wire   [31:0] add_ln691_1_fu_194_p2;
wire   [31:0] zext_ln691_fu_165_p1;
wire   [31:0] zext_ln691_1_fu_186_p1;
reg   [0:0] ap_NS_fsm;
wire    ap_ce_reg;

// power-on initialization
initial begin
#0 drop_err_cnt_V = 32'd0;
#0 drpn_nrdy_cnt_V = 32'd0;
#0 rx_state = 1'd0;
#0 ap_CS_fsm = 1'd1;
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state1)) begin
        if (((icmp_ln878_fu_223_p2 == 1'd1) & (rx_state_load_load_fu_207_p1 == 1'd1))) begin
            rx_state <= 1'd0;
        end else if (((icmp_ln882_fu_211_p2 == 1'd0) & (rx_state_load_load_fu_207_p1 == 1'd0))) begin
            rx_state <= 1'd1;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state1)) begin
        drop_err_cnt_V <= add_ln691_fu_173_p2;
        drpn_nrdy_cnt_V <= add_ln691_1_fu_194_p2;
    end
end

always @ (*) begin
    if ((((icmp_ln878_fu_223_p2 == 1'd0) & (rx_state_load_load_fu_207_p1 == 1'd1) & (1'b1 == ap_CS_fsm_state1)) | ((icmp_ln882_fu_211_p2 == 1'd0) & (rx_state_load_load_fu_207_p1 == 1'd0) & (1'b1 == ap_CS_fsm_state1)))) begin
        ap_phi_mux_cmac_flowcontrol_rx_dev_ap_uint_1_ap_uint_1_ap_uint_32_ap_uint_32_ap_uint_9_ap_uint_9_ap_uint_32_ap_uint_32_ap_uint_32_int_cmac_tx_pause_req_phi_fu_150_p8 = cmac_pfc_val;
    end else if ((((icmp_ln882_fu_211_p2 == 1'd1) & (rx_state_load_load_fu_207_p1 == 1'd0) & (1'b1 == ap_CS_fsm_state1)) | ((icmp_ln878_fu_223_p2 == 1'd1) & (rx_state_load_load_fu_207_p1 == 1'd1) & (1'b1 == ap_CS_fsm_state1)))) begin
        ap_phi_mux_cmac_flowcontrol_rx_dev_ap_uint_1_ap_uint_1_ap_uint_32_ap_uint_32_ap_uint_9_ap_uint_9_ap_uint_32_ap_uint_32_ap_uint_32_int_cmac_tx_pause_req_phi_fu_150_p8 = 9'd0;
    end else begin
        ap_phi_mux_cmac_flowcontrol_rx_dev_ap_uint_1_ap_uint_1_ap_uint_32_ap_uint_32_ap_uint_9_ap_uint_9_ap_uint_32_ap_uint_32_ap_uint_32_int_cmac_tx_pause_req_phi_fu_150_p8 = 'bx;
    end
end

always @ (*) begin
    if ((((icmp_ln878_fu_223_p2 == 1'd0) & (rx_state_load_load_fu_207_p1 == 1'd1) & (1'b1 == ap_CS_fsm_state1)) | ((icmp_ln882_fu_211_p2 == 1'd0) & (rx_state_load_load_fu_207_p1 == 1'd0) & (1'b1 == ap_CS_fsm_state1)))) begin
        ap_phi_mux_p_b12_phi_fu_133_p8 = 1'd1;
    end else if ((((icmp_ln882_fu_211_p2 == 1'd1) & (rx_state_load_load_fu_207_p1 == 1'd0) & (1'b1 == ap_CS_fsm_state1)) | ((icmp_ln878_fu_223_p2 == 1'd1) & (rx_state_load_load_fu_207_p1 == 1'd1) & (1'b1 == ap_CS_fsm_state1)))) begin
        ap_phi_mux_p_b12_phi_fu_133_p8 = 1'd0;
    end else begin
        ap_phi_mux_p_b12_phi_fu_133_p8 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state1)) begin
        cmac_tx_pause_req_o_ap_vld = 1'b1;
    end else begin
        cmac_tx_pause_req_o_ap_vld = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            ap_NS_fsm = ap_ST_fsm_state1;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign add_ln691_1_fu_194_p2 = (drpn_nrdy_cnt_V + zext_ln691_1_fu_186_p1);

assign add_ln691_fu_173_p2 = (drop_err_cnt_V + zext_ln691_fu_165_p1);

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign cmac_tx_pause_req_o = ap_phi_mux_cmac_flowcontrol_rx_dev_ap_uint_1_ap_uint_1_ap_uint_32_ap_uint_32_ap_uint_9_ap_uint_9_ap_uint_32_ap_uint_32_ap_uint_32_int_cmac_tx_pause_req_phi_fu_150_p8;

assign drop_err_cnt_o = (drop_err_cnt_V + zext_ln691_fu_165_p1);

assign drop_nrdy_cnt_o = (drpn_nrdy_cnt_V + zext_ln691_1_fu_186_p1);

assign icmp_ln878_fu_223_p2 = ((fifo_rx_rd_data_count < fifo_rx_min) ? 1'b1 : 1'b0);

assign icmp_ln882_fu_211_p2 = ((fifo_rx_rd_data_count < fifo_rx_max) ? 1'b1 : 1'b0);

assign rx_state_load_load_fu_207_p1 = rx_state;

assign state_o = ap_phi_mux_p_b12_phi_fu_133_p8;

assign zext_ln691_1_fu_186_p1 = drop_nrdy;

assign zext_ln691_fu_165_p1 = drop_err;

endmodule //cmac_flowcontrol_rx_dev

-- ==============================================================
-- RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2020.2 (64-bit)
-- Version: 2020.2
-- Copyright (C) Copyright 1986-2020 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity rx_rdma_hdr is
port (
    rx_i_TDATA : IN STD_LOGIC_VECTOR (511 downto 0);
    rx_i_TKEEP : IN STD_LOGIC_VECTOR (63 downto 0);
    rx_i_TSTRB : IN STD_LOGIC_VECTOR (63 downto 0);
    rx_i_TLAST : IN STD_LOGIC_VECTOR (0 downto 0);
    rx_i_TDEST : IN STD_LOGIC_VECTOR (0 downto 0);
    rx_req_o_V_TDATA : OUT STD_LOGIC_VECTOR (351 downto 0);
    rx_req_payload_o_TDATA : OUT STD_LOGIC_VECTOR (511 downto 0);
    rx_req_payload_o_TKEEP : OUT STD_LOGIC_VECTOR (63 downto 0);
    rx_req_payload_o_TSTRB : OUT STD_LOGIC_VECTOR (63 downto 0);
    rx_req_payload_o_TLAST : OUT STD_LOGIC_VECTOR (0 downto 0);
    rx_req_payload_o_TDEST : OUT STD_LOGIC_VECTOR (0 downto 0);
    tx_resp_o_V_TDATA : OUT STD_LOGIC_VECTOR (255 downto 0);
    tx_resp_payload_o_TDATA : OUT STD_LOGIC_VECTOR (511 downto 0);
    tx_resp_payload_o_TKEEP : OUT STD_LOGIC_VECTOR (63 downto 0);
    tx_resp_payload_o_TSTRB : OUT STD_LOGIC_VECTOR (63 downto 0);
    tx_resp_payload_o_TLAST : OUT STD_LOGIC_VECTOR (0 downto 0);
    tx_resp_payload_o_TDEST : OUT STD_LOGIC_VECTOR (0 downto 0);
    ecn_data_out : OUT STD_LOGIC_VECTOR (0 downto 0);
    ecn_ack_out_address0 : OUT STD_LOGIC_VECTOR (12 downto 0);
    ecn_ack_out_ce0 : OUT STD_LOGIC;
    ecn_ack_out_d0 : OUT STD_LOGIC_VECTOR (7 downto 0);
    ecn_ack_out_q0 : IN STD_LOGIC_VECTOR (7 downto 0);
    ecn_ack_out_we0 : OUT STD_LOGIC;
    drop_reason : OUT STD_LOGIC_VECTOR (31 downto 0);
    rx_last : OUT STD_LOGIC_VECTOR (0 downto 0);
    state_get_hdr : OUT STD_LOGIC_VECTOR (31 downto 0);
    state_cut_payload : OUT STD_LOGIC_VECTOR (31 downto 0);
    state_req_resp_switch : OUT STD_LOGIC_VECTOR (31 downto 0);
    ap_clk : IN STD_LOGIC;
    ap_rst_n : IN STD_LOGIC;
    drop_reason_ap_vld : OUT STD_LOGIC;
    rx_last_ap_vld : OUT STD_LOGIC;
    state_get_hdr_ap_vld : OUT STD_LOGIC;
    rx_i_TVALID : IN STD_LOGIC;
    rx_i_TREADY : OUT STD_LOGIC;
    state_cut_payload_ap_vld : OUT STD_LOGIC;
    rx_req_o_V_TVALID : OUT STD_LOGIC;
    rx_req_o_V_TREADY : IN STD_LOGIC;
    tx_resp_o_V_TVALID : OUT STD_LOGIC;
    tx_resp_o_V_TREADY : IN STD_LOGIC;
    state_req_resp_switch_ap_vld : OUT STD_LOGIC;
    rx_req_payload_o_TVALID : OUT STD_LOGIC;
    rx_req_payload_o_TREADY : IN STD_LOGIC;
    tx_resp_payload_o_TVALID : OUT STD_LOGIC;
    tx_resp_payload_o_TREADY : IN STD_LOGIC );
end;


architecture behav of rx_rdma_hdr is 
    attribute CORE_GENERATION_INFO : STRING;
    attribute CORE_GENERATION_INFO of behav : architecture is
    "rx_rdma_hdr_rx_rdma_hdr,hls_ip_2020_2,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xcu55c-fsvh2892-2L-e,HLS_INPUT_CLOCK=3.000000,HLS_INPUT_ARCH=dataflow,HLS_SYN_CLOCK=7.872004,HLS_SYN_LAT=6,HLS_SYN_TPT=1,HLS_SYN_MEM=0,HLS_SYN_DSP=0,HLS_SYN_FF=11746,HLS_SYN_LUT=71769,HLS_VERSION=2020_2}";
    constant ap_const_lv352_lc_2 : STD_LOGIC_VECTOR (351 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_const_lv512_lc_2 : STD_LOGIC_VECTOR (511 downto 0) := "00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_const_lv64_0 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv256_lc_2 : STD_LOGIC_VECTOR (255 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_const_lv13_0 : STD_LOGIC_VECTOR (12 downto 0) := "0000000000000";
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_const_lv8_0 : STD_LOGIC_VECTOR (7 downto 0) := "00000000";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_logic_1 : STD_LOGIC := '1';

    signal ap_rst_n_inv : STD_LOGIC;
    signal get_hdr_U0_ap_start : STD_LOGIC;
    signal get_hdr_U0_ap_done : STD_LOGIC;
    signal get_hdr_U0_ap_continue : STD_LOGIC;
    signal get_hdr_U0_ap_idle : STD_LOGIC;
    signal get_hdr_U0_ap_ready : STD_LOGIC;
    signal get_hdr_U0_rx_internal_din : STD_LOGIC_VECTOR (1023 downto 0);
    signal get_hdr_U0_rx_internal_write : STD_LOGIC;
    signal get_hdr_U0_rx_headers_internal_din : STD_LOGIC_VECTOR (415 downto 0);
    signal get_hdr_U0_rx_headers_internal_write : STD_LOGIC;
    signal get_hdr_U0_payload_params_internal_din : STD_LOGIC_VECTOR (31 downto 0);
    signal get_hdr_U0_payload_params_internal_write : STD_LOGIC;
    signal get_hdr_U0_drop_reason : STD_LOGIC_VECTOR (31 downto 0);
    signal get_hdr_U0_drop_reason_ap_vld : STD_LOGIC;
    signal get_hdr_U0_rx_last : STD_LOGIC_VECTOR (0 downto 0);
    signal get_hdr_U0_rx_last_ap_vld : STD_LOGIC;
    signal get_hdr_U0_state_get_hdr : STD_LOGIC_VECTOR (31 downto 0);
    signal get_hdr_U0_state_get_hdr_ap_vld : STD_LOGIC;
    signal get_hdr_U0_ecn_data_out : STD_LOGIC_VECTOR (0 downto 0);
    signal get_hdr_U0_ecn_data_out_ap_vld : STD_LOGIC;
    signal get_hdr_U0_ecn_ack_out_address0 : STD_LOGIC_VECTOR (12 downto 0);
    signal get_hdr_U0_ecn_ack_out_ce0 : STD_LOGIC;
    signal get_hdr_U0_ecn_ack_out_we0 : STD_LOGIC;
    signal get_hdr_U0_ecn_ack_out_d0 : STD_LOGIC_VECTOR (7 downto 0);
    signal get_hdr_U0_rx_i_TREADY : STD_LOGIC;
    signal ap_sync_continue : STD_LOGIC;
    signal cut_payload_512_U0_ap_start : STD_LOGIC;
    signal cut_payload_512_U0_ap_done : STD_LOGIC;
    signal cut_payload_512_U0_ap_continue : STD_LOGIC;
    signal cut_payload_512_U0_ap_idle : STD_LOGIC;
    signal cut_payload_512_U0_ap_ready : STD_LOGIC;
    signal cut_payload_512_U0_payload_params_internal_read : STD_LOGIC;
    signal cut_payload_512_U0_rx_internal_read : STD_LOGIC;
    signal cut_payload_512_U0_rx_payload_din : STD_LOGIC_VECTOR (1023 downto 0);
    signal cut_payload_512_U0_rx_payload_write : STD_LOGIC;
    signal cut_payload_512_U0_state_cut_payload : STD_LOGIC_VECTOR (31 downto 0);
    signal cut_payload_512_U0_state_cut_payload_ap_vld : STD_LOGIC;
    signal req_resp_switch_U0_ap_start : STD_LOGIC;
    signal req_resp_switch_U0_ap_done : STD_LOGIC;
    signal req_resp_switch_U0_ap_continue : STD_LOGIC;
    signal req_resp_switch_U0_ap_idle : STD_LOGIC;
    signal req_resp_switch_U0_ap_ready : STD_LOGIC;
    signal req_resp_switch_U0_rx_headers_internal_read : STD_LOGIC;
    signal req_resp_switch_U0_rx_payload_read : STD_LOGIC;
    signal req_resp_switch_U0_rx_req_o_V_TDATA : STD_LOGIC_VECTOR (351 downto 0);
    signal req_resp_switch_U0_rx_req_o_V_TVALID : STD_LOGIC;
    signal req_resp_switch_U0_tx_resp_o_V_TDATA : STD_LOGIC_VECTOR (255 downto 0);
    signal req_resp_switch_U0_tx_resp_o_V_TVALID : STD_LOGIC;
    signal req_resp_switch_U0_state_req_resp_switch : STD_LOGIC_VECTOR (31 downto 0);
    signal req_resp_switch_U0_state_req_resp_switch_ap_vld : STD_LOGIC;
    signal req_resp_switch_U0_rx_req_payload_o_TDATA : STD_LOGIC_VECTOR (511 downto 0);
    signal req_resp_switch_U0_rx_req_payload_o_TVALID : STD_LOGIC;
    signal req_resp_switch_U0_rx_req_payload_o_TKEEP : STD_LOGIC_VECTOR (63 downto 0);
    signal req_resp_switch_U0_rx_req_payload_o_TSTRB : STD_LOGIC_VECTOR (63 downto 0);
    signal req_resp_switch_U0_rx_req_payload_o_TLAST : STD_LOGIC_VECTOR (0 downto 0);
    signal req_resp_switch_U0_rx_req_payload_o_TDEST : STD_LOGIC_VECTOR (0 downto 0);
    signal req_resp_switch_U0_tx_resp_payload_o_TDATA : STD_LOGIC_VECTOR (511 downto 0);
    signal req_resp_switch_U0_tx_resp_payload_o_TVALID : STD_LOGIC;
    signal req_resp_switch_U0_tx_resp_payload_o_TKEEP : STD_LOGIC_VECTOR (63 downto 0);
    signal req_resp_switch_U0_tx_resp_payload_o_TSTRB : STD_LOGIC_VECTOR (63 downto 0);
    signal req_resp_switch_U0_tx_resp_payload_o_TLAST : STD_LOGIC_VECTOR (0 downto 0);
    signal req_resp_switch_U0_tx_resp_payload_o_TDEST : STD_LOGIC_VECTOR (0 downto 0);
    signal rx_headers_internal_full_n : STD_LOGIC;
    signal rx_headers_internal_dout : STD_LOGIC_VECTOR (415 downto 0);
    signal rx_headers_internal_empty_n : STD_LOGIC;
    signal payload_params_internal_full_n : STD_LOGIC;
    signal payload_params_internal_dout : STD_LOGIC_VECTOR (31 downto 0);
    signal payload_params_internal_empty_n : STD_LOGIC;
    signal rx_internal_full_n : STD_LOGIC;
    signal rx_internal_dout : STD_LOGIC_VECTOR (1023 downto 0);
    signal rx_internal_empty_n : STD_LOGIC;
    signal rx_payload_full_n : STD_LOGIC;
    signal rx_payload_dout : STD_LOGIC_VECTOR (1023 downto 0);
    signal rx_payload_empty_n : STD_LOGIC;

    component rx_rdma_hdr_get_hdr IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_continue : IN STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        rx_i_TVALID : IN STD_LOGIC;
        rx_internal_din : OUT STD_LOGIC_VECTOR (1023 downto 0);
        rx_internal_full_n : IN STD_LOGIC;
        rx_internal_write : OUT STD_LOGIC;
        rx_headers_internal_din : OUT STD_LOGIC_VECTOR (415 downto 0);
        rx_headers_internal_full_n : IN STD_LOGIC;
        rx_headers_internal_write : OUT STD_LOGIC;
        payload_params_internal_din : OUT STD_LOGIC_VECTOR (31 downto 0);
        payload_params_internal_full_n : IN STD_LOGIC;
        payload_params_internal_write : OUT STD_LOGIC;
        drop_reason : OUT STD_LOGIC_VECTOR (31 downto 0);
        drop_reason_ap_vld : OUT STD_LOGIC;
        rx_last : OUT STD_LOGIC_VECTOR (0 downto 0);
        rx_last_ap_vld : OUT STD_LOGIC;
        state_get_hdr : OUT STD_LOGIC_VECTOR (31 downto 0);
        state_get_hdr_ap_vld : OUT STD_LOGIC;
        ecn_data_out : OUT STD_LOGIC_VECTOR (0 downto 0);
        ecn_data_out_ap_vld : OUT STD_LOGIC;
        ecn_ack_out_address0 : OUT STD_LOGIC_VECTOR (12 downto 0);
        ecn_ack_out_ce0 : OUT STD_LOGIC;
        ecn_ack_out_we0 : OUT STD_LOGIC;
        ecn_ack_out_d0 : OUT STD_LOGIC_VECTOR (7 downto 0);
        rx_i_TDATA : IN STD_LOGIC_VECTOR (511 downto 0);
        rx_i_TREADY : OUT STD_LOGIC;
        rx_i_TKEEP : IN STD_LOGIC_VECTOR (63 downto 0);
        rx_i_TSTRB : IN STD_LOGIC_VECTOR (63 downto 0);
        rx_i_TLAST : IN STD_LOGIC_VECTOR (0 downto 0);
        rx_i_TDEST : IN STD_LOGIC_VECTOR (0 downto 0) );
    end component;


    component rx_rdma_hdr_cut_payload_512_s IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_continue : IN STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        payload_params_internal_dout : IN STD_LOGIC_VECTOR (31 downto 0);
        payload_params_internal_empty_n : IN STD_LOGIC;
        payload_params_internal_read : OUT STD_LOGIC;
        rx_internal_dout : IN STD_LOGIC_VECTOR (1023 downto 0);
        rx_internal_empty_n : IN STD_LOGIC;
        rx_internal_read : OUT STD_LOGIC;
        rx_payload_din : OUT STD_LOGIC_VECTOR (1023 downto 0);
        rx_payload_full_n : IN STD_LOGIC;
        rx_payload_write : OUT STD_LOGIC;
        state_cut_payload : OUT STD_LOGIC_VECTOR (31 downto 0);
        state_cut_payload_ap_vld : OUT STD_LOGIC );
    end component;


    component rx_rdma_hdr_req_resp_switch IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_continue : IN STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        rx_headers_internal_dout : IN STD_LOGIC_VECTOR (415 downto 0);
        rx_headers_internal_empty_n : IN STD_LOGIC;
        rx_headers_internal_read : OUT STD_LOGIC;
        rx_payload_dout : IN STD_LOGIC_VECTOR (1023 downto 0);
        rx_payload_empty_n : IN STD_LOGIC;
        rx_payload_read : OUT STD_LOGIC;
        rx_req_o_V_TREADY : IN STD_LOGIC;
        tx_resp_o_V_TREADY : IN STD_LOGIC;
        rx_req_payload_o_TREADY : IN STD_LOGIC;
        tx_resp_payload_o_TREADY : IN STD_LOGIC;
        rx_req_o_V_TDATA : OUT STD_LOGIC_VECTOR (351 downto 0);
        rx_req_o_V_TVALID : OUT STD_LOGIC;
        tx_resp_o_V_TDATA : OUT STD_LOGIC_VECTOR (255 downto 0);
        tx_resp_o_V_TVALID : OUT STD_LOGIC;
        state_req_resp_switch : OUT STD_LOGIC_VECTOR (31 downto 0);
        state_req_resp_switch_ap_vld : OUT STD_LOGIC;
        rx_req_payload_o_TDATA : OUT STD_LOGIC_VECTOR (511 downto 0);
        rx_req_payload_o_TVALID : OUT STD_LOGIC;
        rx_req_payload_o_TKEEP : OUT STD_LOGIC_VECTOR (63 downto 0);
        rx_req_payload_o_TSTRB : OUT STD_LOGIC_VECTOR (63 downto 0);
        rx_req_payload_o_TLAST : OUT STD_LOGIC_VECTOR (0 downto 0);
        rx_req_payload_o_TDEST : OUT STD_LOGIC_VECTOR (0 downto 0);
        tx_resp_payload_o_TDATA : OUT STD_LOGIC_VECTOR (511 downto 0);
        tx_resp_payload_o_TVALID : OUT STD_LOGIC;
        tx_resp_payload_o_TKEEP : OUT STD_LOGIC_VECTOR (63 downto 0);
        tx_resp_payload_o_TSTRB : OUT STD_LOGIC_VECTOR (63 downto 0);
        tx_resp_payload_o_TLAST : OUT STD_LOGIC_VECTOR (0 downto 0);
        tx_resp_payload_o_TDEST : OUT STD_LOGIC_VECTOR (0 downto 0) );
    end component;


    component rx_rdma_hdr_fifo_w416_d2_S IS
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        if_read_ce : IN STD_LOGIC;
        if_write_ce : IN STD_LOGIC;
        if_din : IN STD_LOGIC_VECTOR (415 downto 0);
        if_full_n : OUT STD_LOGIC;
        if_write : IN STD_LOGIC;
        if_dout : OUT STD_LOGIC_VECTOR (415 downto 0);
        if_empty_n : OUT STD_LOGIC;
        if_read : IN STD_LOGIC );
    end component;


    component rx_rdma_hdr_fifo_w32_d2_S IS
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        if_read_ce : IN STD_LOGIC;
        if_write_ce : IN STD_LOGIC;
        if_din : IN STD_LOGIC_VECTOR (31 downto 0);
        if_full_n : OUT STD_LOGIC;
        if_write : IN STD_LOGIC;
        if_dout : OUT STD_LOGIC_VECTOR (31 downto 0);
        if_empty_n : OUT STD_LOGIC;
        if_read : IN STD_LOGIC );
    end component;


    component rx_rdma_hdr_fifo_w1024_d2_S IS
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        if_read_ce : IN STD_LOGIC;
        if_write_ce : IN STD_LOGIC;
        if_din : IN STD_LOGIC_VECTOR (1023 downto 0);
        if_full_n : OUT STD_LOGIC;
        if_write : IN STD_LOGIC;
        if_dout : OUT STD_LOGIC_VECTOR (1023 downto 0);
        if_empty_n : OUT STD_LOGIC;
        if_read : IN STD_LOGIC );
    end component;



begin
    get_hdr_U0 : component rx_rdma_hdr_get_hdr
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        ap_start => get_hdr_U0_ap_start,
        ap_done => get_hdr_U0_ap_done,
        ap_continue => get_hdr_U0_ap_continue,
        ap_idle => get_hdr_U0_ap_idle,
        ap_ready => get_hdr_U0_ap_ready,
        rx_i_TVALID => rx_i_TVALID,
        rx_internal_din => get_hdr_U0_rx_internal_din,
        rx_internal_full_n => rx_internal_full_n,
        rx_internal_write => get_hdr_U0_rx_internal_write,
        rx_headers_internal_din => get_hdr_U0_rx_headers_internal_din,
        rx_headers_internal_full_n => rx_headers_internal_full_n,
        rx_headers_internal_write => get_hdr_U0_rx_headers_internal_write,
        payload_params_internal_din => get_hdr_U0_payload_params_internal_din,
        payload_params_internal_full_n => payload_params_internal_full_n,
        payload_params_internal_write => get_hdr_U0_payload_params_internal_write,
        drop_reason => get_hdr_U0_drop_reason,
        drop_reason_ap_vld => get_hdr_U0_drop_reason_ap_vld,
        rx_last => get_hdr_U0_rx_last,
        rx_last_ap_vld => get_hdr_U0_rx_last_ap_vld,
        state_get_hdr => get_hdr_U0_state_get_hdr,
        state_get_hdr_ap_vld => get_hdr_U0_state_get_hdr_ap_vld,
        ecn_data_out => get_hdr_U0_ecn_data_out,
        ecn_data_out_ap_vld => get_hdr_U0_ecn_data_out_ap_vld,
        ecn_ack_out_address0 => get_hdr_U0_ecn_ack_out_address0,
        ecn_ack_out_ce0 => get_hdr_U0_ecn_ack_out_ce0,
        ecn_ack_out_we0 => get_hdr_U0_ecn_ack_out_we0,
        ecn_ack_out_d0 => get_hdr_U0_ecn_ack_out_d0,
        rx_i_TDATA => rx_i_TDATA,
        rx_i_TREADY => get_hdr_U0_rx_i_TREADY,
        rx_i_TKEEP => rx_i_TKEEP,
        rx_i_TSTRB => rx_i_TSTRB,
        rx_i_TLAST => rx_i_TLAST,
        rx_i_TDEST => rx_i_TDEST);

    cut_payload_512_U0 : component rx_rdma_hdr_cut_payload_512_s
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        ap_start => cut_payload_512_U0_ap_start,
        ap_done => cut_payload_512_U0_ap_done,
        ap_continue => cut_payload_512_U0_ap_continue,
        ap_idle => cut_payload_512_U0_ap_idle,
        ap_ready => cut_payload_512_U0_ap_ready,
        payload_params_internal_dout => payload_params_internal_dout,
        payload_params_internal_empty_n => payload_params_internal_empty_n,
        payload_params_internal_read => cut_payload_512_U0_payload_params_internal_read,
        rx_internal_dout => rx_internal_dout,
        rx_internal_empty_n => rx_internal_empty_n,
        rx_internal_read => cut_payload_512_U0_rx_internal_read,
        rx_payload_din => cut_payload_512_U0_rx_payload_din,
        rx_payload_full_n => rx_payload_full_n,
        rx_payload_write => cut_payload_512_U0_rx_payload_write,
        state_cut_payload => cut_payload_512_U0_state_cut_payload,
        state_cut_payload_ap_vld => cut_payload_512_U0_state_cut_payload_ap_vld);

    req_resp_switch_U0 : component rx_rdma_hdr_req_resp_switch
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        ap_start => req_resp_switch_U0_ap_start,
        ap_done => req_resp_switch_U0_ap_done,
        ap_continue => req_resp_switch_U0_ap_continue,
        ap_idle => req_resp_switch_U0_ap_idle,
        ap_ready => req_resp_switch_U0_ap_ready,
        rx_headers_internal_dout => rx_headers_internal_dout,
        rx_headers_internal_empty_n => rx_headers_internal_empty_n,
        rx_headers_internal_read => req_resp_switch_U0_rx_headers_internal_read,
        rx_payload_dout => rx_payload_dout,
        rx_payload_empty_n => rx_payload_empty_n,
        rx_payload_read => req_resp_switch_U0_rx_payload_read,
        rx_req_o_V_TREADY => rx_req_o_V_TREADY,
        tx_resp_o_V_TREADY => tx_resp_o_V_TREADY,
        rx_req_payload_o_TREADY => rx_req_payload_o_TREADY,
        tx_resp_payload_o_TREADY => tx_resp_payload_o_TREADY,
        rx_req_o_V_TDATA => req_resp_switch_U0_rx_req_o_V_TDATA,
        rx_req_o_V_TVALID => req_resp_switch_U0_rx_req_o_V_TVALID,
        tx_resp_o_V_TDATA => req_resp_switch_U0_tx_resp_o_V_TDATA,
        tx_resp_o_V_TVALID => req_resp_switch_U0_tx_resp_o_V_TVALID,
        state_req_resp_switch => req_resp_switch_U0_state_req_resp_switch,
        state_req_resp_switch_ap_vld => req_resp_switch_U0_state_req_resp_switch_ap_vld,
        rx_req_payload_o_TDATA => req_resp_switch_U0_rx_req_payload_o_TDATA,
        rx_req_payload_o_TVALID => req_resp_switch_U0_rx_req_payload_o_TVALID,
        rx_req_payload_o_TKEEP => req_resp_switch_U0_rx_req_payload_o_TKEEP,
        rx_req_payload_o_TSTRB => req_resp_switch_U0_rx_req_payload_o_TSTRB,
        rx_req_payload_o_TLAST => req_resp_switch_U0_rx_req_payload_o_TLAST,
        rx_req_payload_o_TDEST => req_resp_switch_U0_rx_req_payload_o_TDEST,
        tx_resp_payload_o_TDATA => req_resp_switch_U0_tx_resp_payload_o_TDATA,
        tx_resp_payload_o_TVALID => req_resp_switch_U0_tx_resp_payload_o_TVALID,
        tx_resp_payload_o_TKEEP => req_resp_switch_U0_tx_resp_payload_o_TKEEP,
        tx_resp_payload_o_TSTRB => req_resp_switch_U0_tx_resp_payload_o_TSTRB,
        tx_resp_payload_o_TLAST => req_resp_switch_U0_tx_resp_payload_o_TLAST,
        tx_resp_payload_o_TDEST => req_resp_switch_U0_tx_resp_payload_o_TDEST);

    rx_headers_internal_U : component rx_rdma_hdr_fifo_w416_d2_S
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => get_hdr_U0_rx_headers_internal_din,
        if_full_n => rx_headers_internal_full_n,
        if_write => get_hdr_U0_rx_headers_internal_write,
        if_dout => rx_headers_internal_dout,
        if_empty_n => rx_headers_internal_empty_n,
        if_read => req_resp_switch_U0_rx_headers_internal_read);

    payload_params_internal_U : component rx_rdma_hdr_fifo_w32_d2_S
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => get_hdr_U0_payload_params_internal_din,
        if_full_n => payload_params_internal_full_n,
        if_write => get_hdr_U0_payload_params_internal_write,
        if_dout => payload_params_internal_dout,
        if_empty_n => payload_params_internal_empty_n,
        if_read => cut_payload_512_U0_payload_params_internal_read);

    rx_internal_U : component rx_rdma_hdr_fifo_w1024_d2_S
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => get_hdr_U0_rx_internal_din,
        if_full_n => rx_internal_full_n,
        if_write => get_hdr_U0_rx_internal_write,
        if_dout => rx_internal_dout,
        if_empty_n => rx_internal_empty_n,
        if_read => cut_payload_512_U0_rx_internal_read);

    rx_payload_U : component rx_rdma_hdr_fifo_w1024_d2_S
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => cut_payload_512_U0_rx_payload_din,
        if_full_n => rx_payload_full_n,
        if_write => cut_payload_512_U0_rx_payload_write,
        if_dout => rx_payload_dout,
        if_empty_n => rx_payload_empty_n,
        if_read => req_resp_switch_U0_rx_payload_read);





    ap_rst_n_inv_assign_proc : process(ap_rst_n)
    begin
                ap_rst_n_inv <= not(ap_rst_n);
    end process;

    ap_sync_continue <= ap_const_logic_0;
    cut_payload_512_U0_ap_continue <= ap_const_logic_1;
    cut_payload_512_U0_ap_start <= ap_const_logic_1;
    drop_reason <= get_hdr_U0_drop_reason;
    drop_reason_ap_vld <= get_hdr_U0_drop_reason_ap_vld;
    ecn_ack_out_address0 <= get_hdr_U0_ecn_ack_out_address0;
    ecn_ack_out_ce0 <= get_hdr_U0_ecn_ack_out_ce0;
    ecn_ack_out_d0 <= get_hdr_U0_ecn_ack_out_d0;
    ecn_ack_out_we0 <= get_hdr_U0_ecn_ack_out_we0;
    ecn_data_out <= get_hdr_U0_ecn_data_out;
    get_hdr_U0_ap_continue <= ap_const_logic_1;
    get_hdr_U0_ap_start <= ap_const_logic_1;
    req_resp_switch_U0_ap_continue <= ap_const_logic_1;
    req_resp_switch_U0_ap_start <= ap_const_logic_1;
    rx_i_TREADY <= get_hdr_U0_rx_i_TREADY;
    rx_last <= get_hdr_U0_rx_last;
    rx_last_ap_vld <= get_hdr_U0_rx_last_ap_vld;
    rx_req_o_V_TDATA <= req_resp_switch_U0_rx_req_o_V_TDATA;
    rx_req_o_V_TVALID <= req_resp_switch_U0_rx_req_o_V_TVALID;
    rx_req_payload_o_TDATA <= req_resp_switch_U0_rx_req_payload_o_TDATA;
    rx_req_payload_o_TDEST <= req_resp_switch_U0_rx_req_payload_o_TDEST;
    rx_req_payload_o_TKEEP <= req_resp_switch_U0_rx_req_payload_o_TKEEP;
    rx_req_payload_o_TLAST <= req_resp_switch_U0_rx_req_payload_o_TLAST;
    rx_req_payload_o_TSTRB <= req_resp_switch_U0_rx_req_payload_o_TSTRB;
    rx_req_payload_o_TVALID <= req_resp_switch_U0_rx_req_payload_o_TVALID;
    state_cut_payload <= cut_payload_512_U0_state_cut_payload;
    state_cut_payload_ap_vld <= cut_payload_512_U0_state_cut_payload_ap_vld;
    state_get_hdr <= get_hdr_U0_state_get_hdr;
    state_get_hdr_ap_vld <= get_hdr_U0_state_get_hdr_ap_vld;
    state_req_resp_switch <= req_resp_switch_U0_state_req_resp_switch;
    state_req_resp_switch_ap_vld <= req_resp_switch_U0_state_req_resp_switch_ap_vld;
    tx_resp_o_V_TDATA <= req_resp_switch_U0_tx_resp_o_V_TDATA;
    tx_resp_o_V_TVALID <= req_resp_switch_U0_tx_resp_o_V_TVALID;
    tx_resp_payload_o_TDATA <= req_resp_switch_U0_tx_resp_payload_o_TDATA;
    tx_resp_payload_o_TDEST <= req_resp_switch_U0_tx_resp_payload_o_TDEST;
    tx_resp_payload_o_TKEEP <= req_resp_switch_U0_tx_resp_payload_o_TKEEP;
    tx_resp_payload_o_TLAST <= req_resp_switch_U0_tx_resp_payload_o_TLAST;
    tx_resp_payload_o_TSTRB <= req_resp_switch_U0_tx_resp_payload_o_TSTRB;
    tx_resp_payload_o_TVALID <= req_resp_switch_U0_tx_resp_payload_o_TVALID;
end behav;

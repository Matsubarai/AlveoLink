// ==============================================================
// RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2022.1 (64-bit)
// Version: 2022.1
// Copyright (C) Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

(* CORE_GENERATION_INFO="bandwidth_controller_bandwidth_controller,hls_ip_2022_1,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xcu55c-fsvh2892-2L-e,HLS_INPUT_CLOCK=2.500000,HLS_INPUT_ARCH=pipeline,HLS_SYN_CLOCK=1.665857,HLS_SYN_LAT=3,HLS_SYN_TPT=1,HLS_SYN_MEM=0,HLS_SYN_DSP=0,HLS_SYN_FF=3975,HLS_SYN_LUT=1080,HLS_VERSION=2022_1}" *)

module bandwidth_controller (
        ap_clk,
        ap_rst_n,
        inputPacket_TDATA,
        inputPacket_TVALID,
        inputPacket_TREADY,
        inputPacket_TKEEP,
        inputPacket_TSTRB,
        inputPacket_TLAST,
        inputPacket_TDEST,
        inputPacketSize_TDATA,
        inputPacketSize_TVALID,
        inputPacketSize_TREADY,
        outputPacket_TDATA,
        outputPacket_TVALID,
        outputPacket_TREADY,
        outputPacket_TKEEP,
        outputPacket_TSTRB,
        outputPacket_TLAST,
        outputPacket_TDEST,
        outputPacketSize_TDATA,
        outputPacketSize_TVALID,
        outputPacketSize_TREADY,
        ecn_address0,
        ecn_ce0,
        ecn_q0,
        state_out,
        state_out_ap_vld
);

parameter    ap_ST_fsm_pp0_stage0 = 1'd1;

input   ap_clk;
input   ap_rst_n;
input  [511:0] inputPacket_TDATA;
input   inputPacket_TVALID;
output   inputPacket_TREADY;
input  [63:0] inputPacket_TKEEP;
input  [63:0] inputPacket_TSTRB;
input  [0:0] inputPacket_TLAST;
input  [12:0] inputPacket_TDEST;
input  [31:0] inputPacketSize_TDATA;
input   inputPacketSize_TVALID;
output   inputPacketSize_TREADY;
output  [511:0] outputPacket_TDATA;
output   outputPacket_TVALID;
input   outputPacket_TREADY;
output  [63:0] outputPacket_TKEEP;
output  [63:0] outputPacket_TSTRB;
output  [0:0] outputPacket_TLAST;
output  [12:0] outputPacket_TDEST;
output  [31:0] outputPacketSize_TDATA;
output   outputPacketSize_TVALID;
input   outputPacketSize_TREADY;
output  [12:0] ecn_address0;
output   ecn_ce0;
input  [0:0] ecn_q0;
output  [31:0] state_out;
output   state_out_ap_vld;

reg ecn_ce0;
reg state_out_ap_vld;

 reg    ap_rst_n_inv;
reg   [1:0] state;
reg   [31:0] prevSize;
reg   [0:0] prevData_last_V;
reg   [31:0] cycles_to_wait;
reg   [511:0] prevData_data_V;
reg   [63:0] prevData_keep_V;
reg   [63:0] prevData_strb_V;
reg   [12:0] prevData_dest_V;
reg    inputPacket_TDATA_blk_n;
(* fsm_encoding = "none" *) reg   [0:0] ap_CS_fsm;
wire    ap_CS_fsm_pp0_stage0;
wire    ap_block_pp0_stage0;
wire   [1:0] state_load_load_fu_288_p1;
wire   [0:0] p_vld_fu_412_p1;
reg    outputPacket_TDATA_blk_n;
reg    ap_enable_reg_pp0_iter2;
reg   [1:0] state_load_reg_530;
reg   [1:0] state_load_reg_530_pp0_iter1_reg;
reg   [0:0] p_vld_reg_595;
reg   [0:0] p_vld_reg_595_pp0_iter1_reg;
reg   [0:0] ecnData_V_reg_645;
reg    ap_enable_reg_pp0_iter3;
reg   [1:0] state_load_reg_530_pp0_iter2_reg;
reg   [0:0] p_vld_reg_595_pp0_iter2_reg;
reg   [0:0] ecnData_V_reg_645_pp0_iter2_reg;
reg   [0:0] p_vld1_reg_540;
reg   [0:0] p_vld1_reg_540_pp0_iter1_reg;
reg   [0:0] p_vld1_reg_540_pp0_iter2_reg;
reg    outputPacketSize_TDATA_blk_n;
reg   [0:0] icmp_ln43_reg_641;
reg   [0:0] icmp_ln43_reg_641_pp0_iter2_reg;
reg    ap_predicate_op57_read_state1;
reg    ap_block_state1_pp0_stage0_iter0;
wire    ap_block_state2_pp0_stage0_iter1;
reg    ap_predicate_op95_write_state3;
reg    ap_predicate_op96_write_state3;
reg    ap_predicate_op98_write_state3;
reg    ap_predicate_op99_write_state3;
reg    ap_block_state3_pp0_stage0_iter2;
reg    ap_block_state3_io;
reg    ap_predicate_op125_write_state4;
reg    ap_predicate_op126_write_state4;
reg    ap_predicate_op128_write_state4;
reg    ap_predicate_op129_write_state4;
wire    regslice_both_outputPacket_V_data_V_U_apdone_blk;
wire    regslice_both_outputPacketSize_U_apdone_blk;
reg    ap_block_state4_pp0_stage0_iter3;
reg    ap_block_state4_io;
reg    ap_block_pp0_stage0_11001;
wire   [0:0] tmp_last_V_2_load_fu_292_p1;
reg   [0:0] tmp_last_V_2_reg_535;
reg   [0:0] tmp_last_V_2_reg_535_pp0_iter1_reg;
wire   [0:0] grp_fu_264_p1;
reg   [511:0] tmp_data_V_reg_544;
reg   [511:0] tmp_data_V_reg_544_pp0_iter1_reg;
reg   [63:0] tmp_keep_V_reg_549;
reg   [63:0] tmp_keep_V_reg_549_pp0_iter1_reg;
reg   [63:0] tmp_strb_V_reg_554;
reg   [63:0] tmp_strb_V_reg_554_pp0_iter1_reg;
wire   [0:0] grp_fu_280_p1;
reg   [0:0] tmp_last_V_reg_559;
reg   [0:0] tmp_last_V_reg_559_pp0_iter1_reg;
reg   [12:0] tmp_dest_V_reg_564;
reg   [12:0] tmp_dest_V_reg_564_pp0_iter1_reg;
reg   [511:0] tmp_data_V_2_reg_569;
reg   [511:0] tmp_data_V_2_reg_569_pp0_iter1_reg;
reg   [63:0] tmp_keep_V_2_reg_574;
reg   [63:0] tmp_keep_V_2_reg_574_pp0_iter1_reg;
reg   [63:0] tmp_strb_V_2_reg_579;
reg   [63:0] tmp_strb_V_2_reg_579_pp0_iter1_reg;
reg   [12:0] tmp_dest_V_2_reg_584;
reg   [12:0] tmp_dest_V_2_reg_584_pp0_iter1_reg;
reg   [31:0] tmp_reg_599;
reg   [31:0] tmp_reg_599_pp0_iter1_reg;
wire   [511:0] tmp_data_V_1_fu_420_p1;
reg   [511:0] tmp_data_V_1_reg_606;
reg   [511:0] tmp_data_V_1_reg_606_pp0_iter1_reg;
wire   [63:0] tmp_keep_V_1_fu_424_p1;
reg   [63:0] tmp_keep_V_1_reg_611;
reg   [63:0] tmp_keep_V_1_reg_611_pp0_iter1_reg;
wire   [63:0] tmp_strb_V_1_fu_428_p1;
reg   [63:0] tmp_strb_V_1_reg_616;
reg   [63:0] tmp_strb_V_1_reg_616_pp0_iter1_reg;
wire   [0:0] tmp_last_V_1_fu_432_p1;
reg   [0:0] tmp_last_V_1_reg_621;
reg   [0:0] tmp_last_V_1_reg_621_pp0_iter1_reg;
wire   [12:0] tmp_dest_V_1_fu_436_p1;
reg   [12:0] tmp_dest_V_1_reg_626;
reg   [12:0] tmp_dest_V_1_reg_626_pp0_iter1_reg;
reg   [31:0] prevSize_load_reg_636;
wire   [0:0] icmp_ln43_fu_479_p2;
reg    ap_enable_reg_pp0_iter1;
reg    ap_block_pp0_stage0_subdone;
reg   [0:0] ap_phi_mux_prevSize_flag_1_phi_fu_185_p4;
wire   [0:0] ap_phi_reg_pp0_iter1_prevSize_flag_1_reg_182;
reg   [0:0] ap_phi_mux_prevSize_flag_2_phi_fu_197_p20;
wire   [0:0] ap_phi_reg_pp0_iter0_prevSize_flag_2_reg_193;
reg   [0:0] ap_phi_reg_pp0_iter1_prevSize_flag_2_reg_193;
wire   [0:0] icmp_ln66_fu_388_p2;
reg   [31:0] ap_phi_mux_prevSize_new_2_phi_fu_233_p20;
wire   [31:0] ap_phi_reg_pp0_iter1_prevSize_new_2_reg_229;
wire   [63:0] zext_ln587_fu_470_p1;
reg   [1:0] ap_sig_allocacmp_state_load;
wire   [31:0] add_ln35_fu_502_p2;
wire   [31:0] add_ln67_fu_394_p2;
reg   [31:0] ap_sig_allocacmp_cycles_to_wait_load;
wire   [0:0] grp_nbread_fu_102_p6_0;
wire   [0:0] inputPacketSize_read_nbread_fu_116_p2_0;
reg    ap_block_pp0_stage0_01001;
wire   [31:0] shl_ln35_fu_497_p2;
reg   [0:0] ap_NS_fsm;
wire    ap_reset_idle_pp0;
reg    ap_idle_pp0;
wire    ap_enable_pp0;
wire    regslice_both_inputPacket_V_data_V_U_apdone_blk;
wire   [511:0] inputPacket_TDATA_int_regslice;
wire    inputPacket_TVALID_int_regslice;
reg    inputPacket_TREADY_int_regslice;
wire    regslice_both_inputPacket_V_data_V_U_ack_in;
wire    regslice_both_inputPacket_V_keep_V_U_apdone_blk;
wire   [63:0] inputPacket_TKEEP_int_regslice;
wire    regslice_both_inputPacket_V_keep_V_U_vld_out;
wire    regslice_both_inputPacket_V_keep_V_U_ack_in;
wire    regslice_both_inputPacket_V_strb_V_U_apdone_blk;
wire   [63:0] inputPacket_TSTRB_int_regslice;
wire    regslice_both_inputPacket_V_strb_V_U_vld_out;
wire    regslice_both_inputPacket_V_strb_V_U_ack_in;
wire    regslice_both_inputPacket_V_last_V_U_apdone_blk;
wire   [0:0] inputPacket_TLAST_int_regslice;
wire    regslice_both_inputPacket_V_last_V_U_vld_out;
wire    regslice_both_inputPacket_V_last_V_U_ack_in;
wire    regslice_both_inputPacket_V_dest_V_U_apdone_blk;
wire   [12:0] inputPacket_TDEST_int_regslice;
wire    regslice_both_inputPacket_V_dest_V_U_vld_out;
wire    regslice_both_inputPacket_V_dest_V_U_ack_in;
wire    regslice_both_inputPacketSize_U_apdone_blk;
wire   [31:0] inputPacketSize_TDATA_int_regslice;
wire    inputPacketSize_TVALID_int_regslice;
reg    inputPacketSize_TREADY_int_regslice;
wire    regslice_both_inputPacketSize_U_ack_in;
reg   [511:0] outputPacket_TDATA_int_regslice;
reg    outputPacket_TVALID_int_regslice;
wire    outputPacket_TREADY_int_regslice;
wire    regslice_both_outputPacket_V_data_V_U_vld_out;
wire    regslice_both_outputPacket_V_keep_V_U_apdone_blk;
reg   [63:0] outputPacket_TKEEP_int_regslice;
wire    regslice_both_outputPacket_V_keep_V_U_ack_in_dummy;
wire    regslice_both_outputPacket_V_keep_V_U_vld_out;
wire    regslice_both_outputPacket_V_strb_V_U_apdone_blk;
reg   [63:0] outputPacket_TSTRB_int_regslice;
wire    regslice_both_outputPacket_V_strb_V_U_ack_in_dummy;
wire    regslice_both_outputPacket_V_strb_V_U_vld_out;
wire    regslice_both_outputPacket_V_last_V_U_apdone_blk;
reg   [0:0] outputPacket_TLAST_int_regslice;
wire    regslice_both_outputPacket_V_last_V_U_ack_in_dummy;
wire    regslice_both_outputPacket_V_last_V_U_vld_out;
wire    regslice_both_outputPacket_V_dest_V_U_apdone_blk;
reg   [12:0] outputPacket_TDEST_int_regslice;
wire    regslice_both_outputPacket_V_dest_V_U_ack_in_dummy;
wire    regslice_both_outputPacket_V_dest_V_U_vld_out;
reg   [31:0] outputPacketSize_TDATA_int_regslice;
reg    outputPacketSize_TVALID_int_regslice;
wire    outputPacketSize_TREADY_int_regslice;
wire    regslice_both_outputPacketSize_U_vld_out;
reg    ap_condition_766;
reg    ap_condition_771;
reg    ap_condition_775;
reg    ap_condition_779;
reg    ap_condition_782;
reg    ap_condition_787;
reg    ap_condition_791;
reg    ap_condition_794;
wire    ap_ce_reg;

// power-on initialization
initial begin
#0 state = 2'd0;
#0 prevSize = 32'd0;
#0 prevData_last_V = 1'd0;
#0 cycles_to_wait = 32'd0;
#0 prevData_data_V = 512'd0;
#0 prevData_keep_V = 64'd0;
#0 prevData_strb_V = 64'd0;
#0 prevData_dest_V = 13'd0;
#0 ap_CS_fsm = 1'd1;
#0 ap_enable_reg_pp0_iter2 = 1'b0;
#0 ap_enable_reg_pp0_iter3 = 1'b0;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
end

bandwidth_controller_regslice_both #(
    .DataWidth( 512 ))
regslice_both_inputPacket_V_data_V_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst_n_inv),
    .data_in(inputPacket_TDATA),
    .vld_in(inputPacket_TVALID),
    .ack_in(regslice_both_inputPacket_V_data_V_U_ack_in),
    .data_out(inputPacket_TDATA_int_regslice),
    .vld_out(inputPacket_TVALID_int_regslice),
    .ack_out(inputPacket_TREADY_int_regslice),
    .apdone_blk(regslice_both_inputPacket_V_data_V_U_apdone_blk)
);

bandwidth_controller_regslice_both #(
    .DataWidth( 64 ))
regslice_both_inputPacket_V_keep_V_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst_n_inv),
    .data_in(inputPacket_TKEEP),
    .vld_in(inputPacket_TVALID),
    .ack_in(regslice_both_inputPacket_V_keep_V_U_ack_in),
    .data_out(inputPacket_TKEEP_int_regslice),
    .vld_out(regslice_both_inputPacket_V_keep_V_U_vld_out),
    .ack_out(inputPacket_TREADY_int_regslice),
    .apdone_blk(regslice_both_inputPacket_V_keep_V_U_apdone_blk)
);

bandwidth_controller_regslice_both #(
    .DataWidth( 64 ))
regslice_both_inputPacket_V_strb_V_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst_n_inv),
    .data_in(inputPacket_TSTRB),
    .vld_in(inputPacket_TVALID),
    .ack_in(regslice_both_inputPacket_V_strb_V_U_ack_in),
    .data_out(inputPacket_TSTRB_int_regslice),
    .vld_out(regslice_both_inputPacket_V_strb_V_U_vld_out),
    .ack_out(inputPacket_TREADY_int_regslice),
    .apdone_blk(regslice_both_inputPacket_V_strb_V_U_apdone_blk)
);

bandwidth_controller_regslice_both #(
    .DataWidth( 1 ))
regslice_both_inputPacket_V_last_V_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst_n_inv),
    .data_in(inputPacket_TLAST),
    .vld_in(inputPacket_TVALID),
    .ack_in(regslice_both_inputPacket_V_last_V_U_ack_in),
    .data_out(inputPacket_TLAST_int_regslice),
    .vld_out(regslice_both_inputPacket_V_last_V_U_vld_out),
    .ack_out(inputPacket_TREADY_int_regslice),
    .apdone_blk(regslice_both_inputPacket_V_last_V_U_apdone_blk)
);

bandwidth_controller_regslice_both #(
    .DataWidth( 13 ))
regslice_both_inputPacket_V_dest_V_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst_n_inv),
    .data_in(inputPacket_TDEST),
    .vld_in(inputPacket_TVALID),
    .ack_in(regslice_both_inputPacket_V_dest_V_U_ack_in),
    .data_out(inputPacket_TDEST_int_regslice),
    .vld_out(regslice_both_inputPacket_V_dest_V_U_vld_out),
    .ack_out(inputPacket_TREADY_int_regslice),
    .apdone_blk(regslice_both_inputPacket_V_dest_V_U_apdone_blk)
);

bandwidth_controller_regslice_both #(
    .DataWidth( 32 ))
regslice_both_inputPacketSize_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst_n_inv),
    .data_in(inputPacketSize_TDATA),
    .vld_in(inputPacketSize_TVALID),
    .ack_in(regslice_both_inputPacketSize_U_ack_in),
    .data_out(inputPacketSize_TDATA_int_regslice),
    .vld_out(inputPacketSize_TVALID_int_regslice),
    .ack_out(inputPacketSize_TREADY_int_regslice),
    .apdone_blk(regslice_both_inputPacketSize_U_apdone_blk)
);

bandwidth_controller_regslice_both #(
    .DataWidth( 512 ))
regslice_both_outputPacket_V_data_V_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst_n_inv),
    .data_in(outputPacket_TDATA_int_regslice),
    .vld_in(outputPacket_TVALID_int_regslice),
    .ack_in(outputPacket_TREADY_int_regslice),
    .data_out(outputPacket_TDATA),
    .vld_out(regslice_both_outputPacket_V_data_V_U_vld_out),
    .ack_out(outputPacket_TREADY),
    .apdone_blk(regslice_both_outputPacket_V_data_V_U_apdone_blk)
);

bandwidth_controller_regslice_both #(
    .DataWidth( 64 ))
regslice_both_outputPacket_V_keep_V_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst_n_inv),
    .data_in(outputPacket_TKEEP_int_regslice),
    .vld_in(outputPacket_TVALID_int_regslice),
    .ack_in(regslice_both_outputPacket_V_keep_V_U_ack_in_dummy),
    .data_out(outputPacket_TKEEP),
    .vld_out(regslice_both_outputPacket_V_keep_V_U_vld_out),
    .ack_out(outputPacket_TREADY),
    .apdone_blk(regslice_both_outputPacket_V_keep_V_U_apdone_blk)
);

bandwidth_controller_regslice_both #(
    .DataWidth( 64 ))
regslice_both_outputPacket_V_strb_V_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst_n_inv),
    .data_in(outputPacket_TSTRB_int_regslice),
    .vld_in(outputPacket_TVALID_int_regslice),
    .ack_in(regslice_both_outputPacket_V_strb_V_U_ack_in_dummy),
    .data_out(outputPacket_TSTRB),
    .vld_out(regslice_both_outputPacket_V_strb_V_U_vld_out),
    .ack_out(outputPacket_TREADY),
    .apdone_blk(regslice_both_outputPacket_V_strb_V_U_apdone_blk)
);

bandwidth_controller_regslice_both #(
    .DataWidth( 1 ))
regslice_both_outputPacket_V_last_V_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst_n_inv),
    .data_in(outputPacket_TLAST_int_regslice),
    .vld_in(outputPacket_TVALID_int_regslice),
    .ack_in(regslice_both_outputPacket_V_last_V_U_ack_in_dummy),
    .data_out(outputPacket_TLAST),
    .vld_out(regslice_both_outputPacket_V_last_V_U_vld_out),
    .ack_out(outputPacket_TREADY),
    .apdone_blk(regslice_both_outputPacket_V_last_V_U_apdone_blk)
);

bandwidth_controller_regslice_both #(
    .DataWidth( 13 ))
regslice_both_outputPacket_V_dest_V_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst_n_inv),
    .data_in(outputPacket_TDEST_int_regslice),
    .vld_in(outputPacket_TVALID_int_regslice),
    .ack_in(regslice_both_outputPacket_V_dest_V_U_ack_in_dummy),
    .data_out(outputPacket_TDEST),
    .vld_out(regslice_both_outputPacket_V_dest_V_U_vld_out),
    .ack_out(outputPacket_TREADY),
    .apdone_blk(regslice_both_outputPacket_V_dest_V_U_apdone_blk)
);

bandwidth_controller_regslice_both #(
    .DataWidth( 32 ))
regslice_both_outputPacketSize_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst_n_inv),
    .data_in(outputPacketSize_TDATA_int_regslice),
    .vld_in(outputPacketSize_TVALID_int_regslice),
    .ack_in(outputPacketSize_TREADY_int_regslice),
    .data_out(outputPacketSize_TDATA),
    .vld_out(regslice_both_outputPacketSize_U_vld_out),
    .ack_out(outputPacketSize_TREADY),
    .apdone_blk(regslice_both_outputPacketSize_U_apdone_blk)
);

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_pp0_stage0;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            ap_enable_reg_pp0_iter1 <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp0_iter2 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp0_iter3 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter3 <= ap_enable_reg_pp0_iter2;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((((state_load_load_fu_288_p1 == 2'd1) & (1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == 1'b1) & (icmp_ln66_fu_388_p2 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage0)) | ((state_load_load_fu_288_p1 == 2'd1) & (1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == 1'b1) & (icmp_ln66_fu_388_p2 == 1'd1) & (1'b1 == ap_CS_fsm_pp0_stage0)) | ((p_vld_fu_412_p1 == 1'd0) & (ap_sig_allocacmp_state_load == 2'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0)) | ((state_load_load_fu_288_p1 == 2'd2) & (1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == 1'b1) & (grp_fu_280_p1 == 1'd1) & (grp_fu_264_p1 == 1'd1) & (1'b1 == ap_CS_fsm_pp0_stage0)) | ((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (((state_load_load_fu_288_p1 == 2'd2) & (grp_fu_264_p1 == 1'd0)) | ((state_load_load_fu_288_p1 == 2'd2) & (grp_fu_280_p1 == 1'd0)))))) begin
        ap_phi_reg_pp0_iter1_prevSize_flag_2_reg_193 <= 1'd0;
    end else if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_phi_reg_pp0_iter1_prevSize_flag_2_reg_193 <= ap_phi_reg_pp0_iter0_prevSize_flag_2_reg_193;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        if ((1'b1 == ap_condition_775)) begin
            cycles_to_wait <= add_ln67_fu_394_p2;
        end else if ((1'b1 == ap_condition_771)) begin
            cycles_to_wait <= add_ln35_fu_502_p2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((inputPacketSize_read_nbread_fu_116_p2_0 == 1'd1) & (ap_sig_allocacmp_state_load == 2'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        prevData_data_V <= tmp_data_V_1_fu_420_p1;
    end else if ((((state_load_load_fu_288_p1 == 2'd3) & (1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == 1'b1) & (grp_fu_264_p1 == 1'd1) & (tmp_last_V_2_load_fu_292_p1 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage0)) | ((state_load_load_fu_288_p1 == 2'd2) & (1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == 1'b1) & (grp_fu_264_p1 == 1'd1) & (1'b1 == ap_CS_fsm_pp0_stage0)))) begin
        prevData_data_V <= inputPacket_TDATA_int_regslice;
    end
end

always @ (posedge ap_clk) begin
    if (((inputPacketSize_read_nbread_fu_116_p2_0 == 1'd1) & (ap_sig_allocacmp_state_load == 2'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        prevData_dest_V <= tmp_dest_V_1_fu_436_p1;
    end else if ((((state_load_load_fu_288_p1 == 2'd3) & (1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == 1'b1) & (grp_fu_264_p1 == 1'd1) & (tmp_last_V_2_load_fu_292_p1 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage0)) | ((state_load_load_fu_288_p1 == 2'd2) & (1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == 1'b1) & (grp_fu_264_p1 == 1'd1) & (1'b1 == ap_CS_fsm_pp0_stage0)))) begin
        prevData_dest_V <= inputPacket_TDEST_int_regslice;
    end
end

always @ (posedge ap_clk) begin
    if (((inputPacketSize_read_nbread_fu_116_p2_0 == 1'd1) & (ap_sig_allocacmp_state_load == 2'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        prevData_keep_V <= tmp_keep_V_1_fu_424_p1;
    end else if ((((state_load_load_fu_288_p1 == 2'd3) & (1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == 1'b1) & (grp_fu_264_p1 == 1'd1) & (tmp_last_V_2_load_fu_292_p1 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage0)) | ((state_load_load_fu_288_p1 == 2'd2) & (1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == 1'b1) & (grp_fu_264_p1 == 1'd1) & (1'b1 == ap_CS_fsm_pp0_stage0)))) begin
        prevData_keep_V <= inputPacket_TKEEP_int_regslice;
    end
end

always @ (posedge ap_clk) begin
    if (((inputPacketSize_read_nbread_fu_116_p2_0 == 1'd1) & (ap_sig_allocacmp_state_load == 2'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        prevData_last_V <= tmp_last_V_1_fu_432_p1;
    end else if ((((state_load_load_fu_288_p1 == 2'd3) & (1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == 1'b1) & (grp_fu_264_p1 == 1'd1) & (tmp_last_V_2_load_fu_292_p1 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage0)) | ((state_load_load_fu_288_p1 == 2'd2) & (1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == 1'b1) & (grp_fu_264_p1 == 1'd1) & (1'b1 == ap_CS_fsm_pp0_stage0)))) begin
        prevData_last_V <= inputPacket_TLAST_int_regslice;
    end
end

always @ (posedge ap_clk) begin
    if (((inputPacketSize_read_nbread_fu_116_p2_0 == 1'd1) & (ap_sig_allocacmp_state_load == 2'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        prevData_strb_V <= tmp_strb_V_1_fu_428_p1;
    end else if ((((state_load_load_fu_288_p1 == 2'd3) & (1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == 1'b1) & (grp_fu_264_p1 == 1'd1) & (tmp_last_V_2_load_fu_292_p1 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage0)) | ((state_load_load_fu_288_p1 == 2'd2) & (1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == 1'b1) & (grp_fu_264_p1 == 1'd1) & (1'b1 == ap_CS_fsm_pp0_stage0)))) begin
        prevData_strb_V <= inputPacket_TSTRB_int_regslice;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        if ((1'b1 == ap_condition_794)) begin
            state <= 2'd3;
        end else if ((1'b1 == ap_condition_791)) begin
            state <= 2'd0;
        end else if ((1'b1 == ap_condition_787)) begin
            state <= 2'd0;
        end else if ((1'b1 == ap_condition_771)) begin
            state <= 2'd1;
        end else if ((1'b1 == ap_condition_782)) begin
            state <= 2'd0;
        end else if ((1'b1 == ap_condition_779)) begin
            state <= 2'd2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((p_vld_reg_595 == 1'd1) & (state_load_reg_530 == 2'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ecnData_V_reg_645 <= ecn_q0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b0 == ap_block_pp0_stage0_11001)) begin
        ecnData_V_reg_645_pp0_iter2_reg <= ecnData_V_reg_645;
        icmp_ln43_reg_641_pp0_iter2_reg <= icmp_ln43_reg_641;
        p_vld1_reg_540_pp0_iter2_reg <= p_vld1_reg_540_pp0_iter1_reg;
        p_vld_reg_595_pp0_iter2_reg <= p_vld_reg_595_pp0_iter1_reg;
        state_load_reg_530_pp0_iter2_reg <= state_load_reg_530_pp0_iter1_reg;
    end
end

always @ (posedge ap_clk) begin
    if (((state_load_reg_530 == 2'd3) & (1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        icmp_ln43_reg_641 <= icmp_ln43_fu_479_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((state_load_load_fu_288_p1 == 2'd2) & (1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        p_vld1_reg_540 <= grp_nbread_fu_102_p6_0;
        tmp_data_V_reg_544 <= inputPacket_TDATA_int_regslice;
        tmp_dest_V_reg_564 <= inputPacket_TDEST_int_regslice;
        tmp_keep_V_reg_549 <= inputPacket_TKEEP_int_regslice;
        tmp_last_V_reg_559 <= inputPacket_TLAST_int_regslice;
        tmp_strb_V_reg_554 <= inputPacket_TSTRB_int_regslice;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        p_vld1_reg_540_pp0_iter1_reg <= p_vld1_reg_540;
        p_vld_reg_595_pp0_iter1_reg <= p_vld_reg_595;
        prevSize_load_reg_636 <= prevSize;
        state_load_reg_530 <= ap_sig_allocacmp_state_load;
        state_load_reg_530_pp0_iter1_reg <= state_load_reg_530;
        tmp_data_V_1_reg_606_pp0_iter1_reg <= tmp_data_V_1_reg_606;
        tmp_data_V_2_reg_569_pp0_iter1_reg <= tmp_data_V_2_reg_569;
        tmp_data_V_reg_544_pp0_iter1_reg <= tmp_data_V_reg_544;
        tmp_dest_V_1_reg_626_pp0_iter1_reg <= tmp_dest_V_1_reg_626;
        tmp_dest_V_2_reg_584_pp0_iter1_reg <= tmp_dest_V_2_reg_584;
        tmp_dest_V_reg_564_pp0_iter1_reg <= tmp_dest_V_reg_564;
        tmp_keep_V_1_reg_611_pp0_iter1_reg <= tmp_keep_V_1_reg_611;
        tmp_keep_V_2_reg_574_pp0_iter1_reg <= tmp_keep_V_2_reg_574;
        tmp_keep_V_reg_549_pp0_iter1_reg <= tmp_keep_V_reg_549;
        tmp_last_V_1_reg_621_pp0_iter1_reg <= tmp_last_V_1_reg_621;
        tmp_last_V_2_reg_535 <= prevData_last_V;
        tmp_last_V_2_reg_535_pp0_iter1_reg <= tmp_last_V_2_reg_535;
        tmp_last_V_reg_559_pp0_iter1_reg <= tmp_last_V_reg_559;
        tmp_reg_599_pp0_iter1_reg <= tmp_reg_599;
        tmp_strb_V_1_reg_616_pp0_iter1_reg <= tmp_strb_V_1_reg_616;
        tmp_strb_V_2_reg_579_pp0_iter1_reg <= tmp_strb_V_2_reg_579;
        tmp_strb_V_reg_554_pp0_iter1_reg <= tmp_strb_V_reg_554;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_sig_allocacmp_state_load == 2'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        p_vld_reg_595 <= inputPacketSize_read_nbread_fu_116_p2_0;
        tmp_reg_599 <= inputPacketSize_TDATA_int_regslice;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_phi_mux_prevSize_flag_2_phi_fu_197_p20 == 1'd1) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        prevSize <= ap_phi_mux_prevSize_new_2_phi_fu_233_p20;
    end
end

always @ (posedge ap_clk) begin
    if (((inputPacketSize_read_nbread_fu_116_p2_0 == 1'd1) & (ap_sig_allocacmp_state_load == 2'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        tmp_data_V_1_reg_606 <= inputPacket_TDATA_int_regslice;
        tmp_dest_V_1_reg_626 <= inputPacket_TDEST_int_regslice;
        tmp_keep_V_1_reg_611 <= inputPacket_TKEEP_int_regslice;
        tmp_last_V_1_reg_621 <= inputPacket_TLAST_int_regslice;
        tmp_strb_V_1_reg_616 <= inputPacket_TSTRB_int_regslice;
    end
end

always @ (posedge ap_clk) begin
    if (((state_load_load_fu_288_p1 == 2'd3) & (1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        tmp_data_V_2_reg_569 <= prevData_data_V;
        tmp_dest_V_2_reg_584 <= prevData_dest_V;
        tmp_keep_V_2_reg_574 <= prevData_keep_V;
        tmp_strb_V_2_reg_579 <= prevData_strb_V;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter3 == 1'b0) & (ap_enable_reg_pp0_iter2 == 1'b0) & (1'b1 == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if ((state_load_reg_530 == 2'd3)) begin
        if ((icmp_ln43_fu_479_p2 == 1'd0)) begin
            ap_phi_mux_prevSize_flag_1_phi_fu_185_p4 = 1'd0;
        end else if ((icmp_ln43_fu_479_p2 == 1'd1)) begin
            ap_phi_mux_prevSize_flag_1_phi_fu_185_p4 = 1'd1;
        end else begin
            ap_phi_mux_prevSize_flag_1_phi_fu_185_p4 = ap_phi_reg_pp0_iter1_prevSize_flag_1_reg_182;
        end
    end else begin
        ap_phi_mux_prevSize_flag_1_phi_fu_185_p4 = ap_phi_reg_pp0_iter1_prevSize_flag_1_reg_182;
    end
end

always @ (*) begin
    if ((((state_load_reg_530 == 2'd3) & (tmp_last_V_2_reg_535 == 1'd0)) | ((state_load_reg_530 == 2'd3) & (tmp_last_V_2_reg_535 == 1'd1)))) begin
        ap_phi_mux_prevSize_flag_2_phi_fu_197_p20 = ap_phi_mux_prevSize_flag_1_phi_fu_185_p4;
    end else if ((((p_vld_reg_595 == 1'd1) & (state_load_reg_530 == 2'd0) & (ecn_q0 == 1'd0) & (tmp_last_V_1_reg_621 == 1'd1)) | ((p_vld_reg_595 == 1'd1) & (state_load_reg_530 == 2'd0) & (ecn_q0 == 1'd0) & (tmp_last_V_1_reg_621 == 1'd0)) | ((p_vld_reg_595 == 1'd1) & (state_load_reg_530 == 2'd0) & (ecn_q0 == 1'd1)))) begin
        ap_phi_mux_prevSize_flag_2_phi_fu_197_p20 = 1'd1;
    end else begin
        ap_phi_mux_prevSize_flag_2_phi_fu_197_p20 = ap_phi_reg_pp0_iter1_prevSize_flag_2_reg_193;
    end
end

always @ (*) begin
    if ((((p_vld_reg_595 == 1'd1) & (state_load_reg_530 == 2'd0) & (ecn_q0 == 1'd0) & (tmp_last_V_1_reg_621 == 1'd1)) | ((p_vld_reg_595 == 1'd1) & (state_load_reg_530 == 2'd0) & (ecn_q0 == 1'd0) & (tmp_last_V_1_reg_621 == 1'd0)) | ((state_load_reg_530 == 2'd3) & (tmp_last_V_2_reg_535 == 1'd0)) | ((state_load_reg_530 == 2'd3) & (tmp_last_V_2_reg_535 == 1'd1)))) begin
        ap_phi_mux_prevSize_new_2_phi_fu_233_p20 = 32'd0;
    end else if (((p_vld_reg_595 == 1'd1) & (state_load_reg_530 == 2'd0) & (ecn_q0 == 1'd1))) begin
        ap_phi_mux_prevSize_new_2_phi_fu_233_p20 = tmp_reg_599;
    end else begin
        ap_phi_mux_prevSize_new_2_phi_fu_233_p20 = ap_phi_reg_pp0_iter1_prevSize_new_2_reg_229;
    end
end

assign ap_reset_idle_pp0 = 1'b0;

always @ (*) begin
    if (((p_vld_reg_595 == 1'd1) & (state_load_reg_530 == 2'd0) & (1'b0 == ap_block_pp0_stage0) & (ecn_q0 == 1'd1) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_sig_allocacmp_cycles_to_wait_load = add_ln35_fu_502_p2;
    end else begin
        ap_sig_allocacmp_cycles_to_wait_load = cycles_to_wait;
    end
end

always @ (*) begin
    if ((1'b1 == ap_condition_766)) begin
        if ((ecn_q0 == 1'd1)) begin
            ap_sig_allocacmp_state_load = 2'd1;
        end else if (((ecn_q0 == 1'd0) & (tmp_last_V_1_reg_621 == 1'd1))) begin
            ap_sig_allocacmp_state_load = 2'd0;
        end else if (((ecn_q0 == 1'd0) & (tmp_last_V_1_reg_621 == 1'd0))) begin
            ap_sig_allocacmp_state_load = 2'd2;
        end else begin
            ap_sig_allocacmp_state_load = state;
        end
    end else begin
        ap_sig_allocacmp_state_load = state;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ecn_ce0 = 1'b1;
    end else begin
        ecn_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_sig_allocacmp_state_load == 2'd0) & (inputPacketSize_TVALID_int_regslice == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        inputPacketSize_TREADY_int_regslice = 1'b1;
    end else begin
        inputPacketSize_TREADY_int_regslice = 1'b0;
    end
end

always @ (*) begin
    if (((inputPacketSize_read_nbread_fu_116_p2_0 == 1'd1) & (ap_sig_allocacmp_state_load == 2'd0) & (1'b0 == ap_block_pp0_stage0) & (1'b1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        inputPacket_TDATA_blk_n = inputPacket_TVALID_int_regslice;
    end else begin
        inputPacket_TDATA_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((((inputPacket_TVALID_int_regslice == 1'b1) & (((inputPacket_TVALID_int_regslice == 1'b1) & (((inputPacket_TVALID_int_regslice == 1'b1) & (((inputPacket_TVALID_int_regslice == 1'b1) & (((inputPacket_TVALID_int_regslice == 1'b1) & (((state_load_load_fu_288_p1 == 2'd3) & (1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == 1'b1) & (tmp_last_V_2_load_fu_292_p1 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage0)) | ((state_load_load_fu_288_p1 == 2'd2) & (1'b0 == ap_block_pp0_stage0_11001) & (inputPacket_TVALID_int_regslice == 1'b1) & (1'b1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0)))) | ((state_load_load_fu_288_p1 == 2'd3) & (1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == 1'b1) & (tmp_last_V_2_load_fu_292_p1 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage0)))) | ((state_load_load_fu_288_p1 == 2'd3) & (1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == 1'b1) & (tmp_last_V_2_load_fu_292_p1 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage0)))) | ((state_load_load_fu_288_p1 == 2'd3) & (1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == 1'b1) & (tmp_last_V_2_load_fu_292_p1 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage0)))) | ((state_load_load_fu_288_p1 == 2'd3) & (1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == 1'b1) & (tmp_last_V_2_load_fu_292_p1 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage0)))) | ((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_predicate_op57_read_state1 == 1'b1)))) begin
        inputPacket_TREADY_int_regslice = 1'b1;
    end else begin
        inputPacket_TREADY_int_regslice = 1'b0;
    end
end

always @ (*) begin
    if ((((ecnData_V_reg_645_pp0_iter2_reg == 1'd0) & (p_vld_reg_595_pp0_iter2_reg == 1'd1) & (state_load_reg_530_pp0_iter2_reg == 2'd0) & (ap_enable_reg_pp0_iter3 == 1'b1) & (1'b0 == ap_block_pp0_stage0)) | ((ecnData_V_reg_645 == 1'd0) & (p_vld_reg_595_pp0_iter1_reg == 1'd1) & (state_load_reg_530_pp0_iter1_reg == 2'd0) & (ap_enable_reg_pp0_iter2 == 1'b1) & (1'b0 == ap_block_pp0_stage0)) | ((state_load_reg_530_pp0_iter2_reg == 2'd3) & (ap_enable_reg_pp0_iter3 == 1'b1) & (1'b0 == ap_block_pp0_stage0) & (icmp_ln43_reg_641_pp0_iter2_reg == 1'd1)) | ((state_load_reg_530_pp0_iter1_reg == 2'd3) & (ap_enable_reg_pp0_iter2 == 1'b1) & (1'b0 == ap_block_pp0_stage0) & (icmp_ln43_reg_641 == 1'd1)))) begin
        outputPacketSize_TDATA_blk_n = outputPacketSize_TREADY_int_regslice;
    end else begin
        outputPacketSize_TDATA_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter2 == 1'b1) & (1'b0 == ap_block_pp0_stage0_01001))) begin
        if ((ap_predicate_op98_write_state3 == 1'b1)) begin
            outputPacketSize_TDATA_int_regslice = tmp_reg_599_pp0_iter1_reg;
        end else if ((ap_predicate_op96_write_state3 == 1'b1)) begin
            outputPacketSize_TDATA_int_regslice = prevSize_load_reg_636;
        end else begin
            outputPacketSize_TDATA_int_regslice = 'bx;
        end
    end else begin
        outputPacketSize_TDATA_int_regslice = 'bx;
    end
end

always @ (*) begin
    if ((((ap_enable_reg_pp0_iter2 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_predicate_op98_write_state3 == 1'b1)) | ((ap_enable_reg_pp0_iter2 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_predicate_op96_write_state3 == 1'b1)))) begin
        outputPacketSize_TVALID_int_regslice = 1'b1;
    end else begin
        outputPacketSize_TVALID_int_regslice = 1'b0;
    end
end

always @ (*) begin
    if ((((ecnData_V_reg_645_pp0_iter2_reg == 1'd0) & (p_vld_reg_595_pp0_iter2_reg == 1'd1) & (state_load_reg_530_pp0_iter2_reg == 2'd0) & (ap_enable_reg_pp0_iter3 == 1'b1) & (1'b0 == ap_block_pp0_stage0)) | ((ecnData_V_reg_645 == 1'd0) & (p_vld_reg_595_pp0_iter1_reg == 1'd1) & (state_load_reg_530_pp0_iter1_reg == 2'd0) & (ap_enable_reg_pp0_iter2 == 1'b1) & (1'b0 == ap_block_pp0_stage0)) | ((state_load_reg_530_pp0_iter2_reg == 2'd2) & (ap_enable_reg_pp0_iter3 == 1'b1) & (1'b0 == ap_block_pp0_stage0) & (p_vld1_reg_540_pp0_iter2_reg == 1'd1)) | ((state_load_reg_530_pp0_iter1_reg == 2'd2) & (ap_enable_reg_pp0_iter2 == 1'b1) & (1'b0 == ap_block_pp0_stage0) & (p_vld1_reg_540_pp0_iter1_reg == 1'd1)) | ((state_load_reg_530_pp0_iter2_reg == 2'd3) & (ap_enable_reg_pp0_iter3 == 1'b1) & (1'b0 == ap_block_pp0_stage0)) | ((state_load_reg_530_pp0_iter1_reg == 2'd3) & (ap_enable_reg_pp0_iter2 == 1'b1) & (1'b0 == ap_block_pp0_stage0)))) begin
        outputPacket_TDATA_blk_n = outputPacket_TREADY_int_regslice;
    end else begin
        outputPacket_TDATA_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter2 == 1'b1) & (1'b0 == ap_block_pp0_stage0_01001))) begin
        if ((ap_predicate_op99_write_state3 == 1'b1)) begin
            outputPacket_TDATA_int_regslice = tmp_data_V_1_reg_606_pp0_iter1_reg;
        end else if ((state_load_reg_530_pp0_iter1_reg == 2'd3)) begin
            outputPacket_TDATA_int_regslice = tmp_data_V_2_reg_569_pp0_iter1_reg;
        end else if ((ap_predicate_op95_write_state3 == 1'b1)) begin
            outputPacket_TDATA_int_regslice = tmp_data_V_reg_544_pp0_iter1_reg;
        end else begin
            outputPacket_TDATA_int_regslice = 'bx;
        end
    end else begin
        outputPacket_TDATA_int_regslice = 'bx;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter2 == 1'b1) & (1'b0 == ap_block_pp0_stage0_01001))) begin
        if ((ap_predicate_op99_write_state3 == 1'b1)) begin
            outputPacket_TDEST_int_regslice = tmp_dest_V_1_reg_626_pp0_iter1_reg;
        end else if ((state_load_reg_530_pp0_iter1_reg == 2'd3)) begin
            outputPacket_TDEST_int_regslice = tmp_dest_V_2_reg_584_pp0_iter1_reg;
        end else if ((ap_predicate_op95_write_state3 == 1'b1)) begin
            outputPacket_TDEST_int_regslice = tmp_dest_V_reg_564_pp0_iter1_reg;
        end else begin
            outputPacket_TDEST_int_regslice = 'bx;
        end
    end else begin
        outputPacket_TDEST_int_regslice = 'bx;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter2 == 1'b1) & (1'b0 == ap_block_pp0_stage0_01001))) begin
        if ((ap_predicate_op99_write_state3 == 1'b1)) begin
            outputPacket_TKEEP_int_regslice = tmp_keep_V_1_reg_611_pp0_iter1_reg;
        end else if ((state_load_reg_530_pp0_iter1_reg == 2'd3)) begin
            outputPacket_TKEEP_int_regslice = tmp_keep_V_2_reg_574_pp0_iter1_reg;
        end else if ((ap_predicate_op95_write_state3 == 1'b1)) begin
            outputPacket_TKEEP_int_regslice = tmp_keep_V_reg_549_pp0_iter1_reg;
        end else begin
            outputPacket_TKEEP_int_regslice = 'bx;
        end
    end else begin
        outputPacket_TKEEP_int_regslice = 'bx;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter2 == 1'b1) & (1'b0 == ap_block_pp0_stage0_01001))) begin
        if ((ap_predicate_op99_write_state3 == 1'b1)) begin
            outputPacket_TLAST_int_regslice = tmp_last_V_1_reg_621_pp0_iter1_reg;
        end else if ((state_load_reg_530_pp0_iter1_reg == 2'd3)) begin
            outputPacket_TLAST_int_regslice = tmp_last_V_2_reg_535_pp0_iter1_reg;
        end else if ((ap_predicate_op95_write_state3 == 1'b1)) begin
            outputPacket_TLAST_int_regslice = tmp_last_V_reg_559_pp0_iter1_reg;
        end else begin
            outputPacket_TLAST_int_regslice = 'bx;
        end
    end else begin
        outputPacket_TLAST_int_regslice = 'bx;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter2 == 1'b1) & (1'b0 == ap_block_pp0_stage0_01001))) begin
        if ((ap_predicate_op99_write_state3 == 1'b1)) begin
            outputPacket_TSTRB_int_regslice = tmp_strb_V_1_reg_616_pp0_iter1_reg;
        end else if ((state_load_reg_530_pp0_iter1_reg == 2'd3)) begin
            outputPacket_TSTRB_int_regslice = tmp_strb_V_2_reg_579_pp0_iter1_reg;
        end else if ((ap_predicate_op95_write_state3 == 1'b1)) begin
            outputPacket_TSTRB_int_regslice = tmp_strb_V_reg_554_pp0_iter1_reg;
        end else begin
            outputPacket_TSTRB_int_regslice = 'bx;
        end
    end else begin
        outputPacket_TSTRB_int_regslice = 'bx;
    end
end

always @ (*) begin
    if ((((ap_enable_reg_pp0_iter2 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_predicate_op99_write_state3 == 1'b1)) | ((ap_enable_reg_pp0_iter2 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_predicate_op95_write_state3 == 1'b1)) | ((state_load_reg_530_pp0_iter1_reg == 2'd3) & (ap_enable_reg_pp0_iter2 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001)))) begin
        outputPacket_TVALID_int_regslice = 1'b1;
    end else begin
        outputPacket_TVALID_int_regslice = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter3 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        state_out_ap_vld = 1'b1;
    end else begin
        state_out_ap_vld = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_pp0_stage0 : begin
            ap_NS_fsm = ap_ST_fsm_pp0_stage0;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign add_ln35_fu_502_p2 = (shl_ln35_fu_497_p2 + 32'd75);

assign add_ln67_fu_394_p2 = ($signed(ap_sig_allocacmp_cycles_to_wait_load) + $signed(32'd4294967295));

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd0];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp0_stage0_01001 = (((ap_enable_reg_pp0_iter3 == 1'b1) & ((regslice_both_outputPacketSize_U_apdone_blk == 1'b1) | (regslice_both_outputPacket_V_data_V_U_apdone_blk == 1'b1) | ((outputPacketSize_TREADY_int_regslice == 1'b0) & (ap_predicate_op128_write_state4 == 1'b1)) | ((outputPacketSize_TREADY_int_regslice == 1'b0) & (ap_predicate_op126_write_state4 == 1'b1)) | ((outputPacket_TREADY_int_regslice == 1'b0) & (ap_predicate_op129_write_state4 == 1'b1)) | ((outputPacket_TREADY_int_regslice == 1'b0) & (ap_predicate_op125_write_state4 == 1'b1)) | ((state_load_reg_530_pp0_iter2_reg == 2'd3) & (outputPacket_TREADY_int_regslice == 1'b0)))) | ((ap_enable_reg_pp0_iter2 == 1'b1) & (((outputPacketSize_TREADY_int_regslice == 1'b0) & (ap_predicate_op98_write_state3 == 1'b1)) | ((outputPacketSize_TREADY_int_regslice == 1'b0) & (ap_predicate_op96_write_state3 == 1'b1)) | ((outputPacket_TREADY_int_regslice == 1'b0) & (ap_predicate_op99_write_state3 == 1'b1)) | ((outputPacket_TREADY_int_regslice == 1'b0) & (ap_predicate_op95_write_state3 == 1'b1)) | ((state_load_reg_530_pp0_iter1_reg == 2'd3) & (outputPacket_TREADY_int_regslice == 1'b0)))) | ((inputPacket_TVALID_int_regslice == 1'b0) & (1'b1 == 1'b1) & (ap_predicate_op57_read_state1 == 1'b1)));
end

always @ (*) begin
    ap_block_pp0_stage0_11001 = (((ap_enable_reg_pp0_iter3 == 1'b1) & ((1'b1 == ap_block_state4_io) | (regslice_both_outputPacketSize_U_apdone_blk == 1'b1) | (regslice_both_outputPacket_V_data_V_U_apdone_blk == 1'b1) | ((outputPacketSize_TREADY_int_regslice == 1'b0) & (ap_predicate_op128_write_state4 == 1'b1)) | ((outputPacketSize_TREADY_int_regslice == 1'b0) & (ap_predicate_op126_write_state4 == 1'b1)) | ((outputPacket_TREADY_int_regslice == 1'b0) & (ap_predicate_op129_write_state4 == 1'b1)) | ((outputPacket_TREADY_int_regslice == 1'b0) & (ap_predicate_op125_write_state4 == 1'b1)) | ((state_load_reg_530_pp0_iter2_reg == 2'd3) & (outputPacket_TREADY_int_regslice == 1'b0)))) | ((ap_enable_reg_pp0_iter2 == 1'b1) & ((1'b1 == ap_block_state3_io) | ((outputPacketSize_TREADY_int_regslice == 1'b0) & (ap_predicate_op98_write_state3 == 1'b1)) | ((outputPacketSize_TREADY_int_regslice == 1'b0) & (ap_predicate_op96_write_state3 == 1'b1)) | ((outputPacket_TREADY_int_regslice == 1'b0) & (ap_predicate_op99_write_state3 == 1'b1)) | ((outputPacket_TREADY_int_regslice == 1'b0) & (ap_predicate_op95_write_state3 == 1'b1)) | ((state_load_reg_530_pp0_iter1_reg == 2'd3) & (outputPacket_TREADY_int_regslice == 1'b0)))) | ((inputPacket_TVALID_int_regslice == 1'b0) & (1'b1 == 1'b1) & (ap_predicate_op57_read_state1 == 1'b1)));
end

always @ (*) begin
    ap_block_pp0_stage0_subdone = (((ap_enable_reg_pp0_iter3 == 1'b1) & ((1'b1 == ap_block_state4_io) | (regslice_both_outputPacketSize_U_apdone_blk == 1'b1) | (regslice_both_outputPacket_V_data_V_U_apdone_blk == 1'b1) | ((outputPacketSize_TREADY_int_regslice == 1'b0) & (ap_predicate_op128_write_state4 == 1'b1)) | ((outputPacketSize_TREADY_int_regslice == 1'b0) & (ap_predicate_op126_write_state4 == 1'b1)) | ((outputPacket_TREADY_int_regslice == 1'b0) & (ap_predicate_op129_write_state4 == 1'b1)) | ((outputPacket_TREADY_int_regslice == 1'b0) & (ap_predicate_op125_write_state4 == 1'b1)) | ((state_load_reg_530_pp0_iter2_reg == 2'd3) & (outputPacket_TREADY_int_regslice == 1'b0)))) | ((ap_enable_reg_pp0_iter2 == 1'b1) & ((1'b1 == ap_block_state3_io) | ((outputPacketSize_TREADY_int_regslice == 1'b0) & (ap_predicate_op98_write_state3 == 1'b1)) | ((outputPacketSize_TREADY_int_regslice == 1'b0) & (ap_predicate_op96_write_state3 == 1'b1)) | ((outputPacket_TREADY_int_regslice == 1'b0) & (ap_predicate_op99_write_state3 == 1'b1)) | ((outputPacket_TREADY_int_regslice == 1'b0) & (ap_predicate_op95_write_state3 == 1'b1)) | ((state_load_reg_530_pp0_iter1_reg == 2'd3) & (outputPacket_TREADY_int_regslice == 1'b0)))) | ((inputPacket_TVALID_int_regslice == 1'b0) & (1'b1 == 1'b1) & (ap_predicate_op57_read_state1 == 1'b1)));
end

always @ (*) begin
    ap_block_state1_pp0_stage0_iter0 = ((inputPacket_TVALID_int_regslice == 1'b0) & (ap_predicate_op57_read_state1 == 1'b1));
end

assign ap_block_state2_pp0_stage0_iter1 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_state3_io = (((outputPacketSize_TREADY_int_regslice == 1'b0) & (ap_predicate_op98_write_state3 == 1'b1)) | ((outputPacketSize_TREADY_int_regslice == 1'b0) & (ap_predicate_op96_write_state3 == 1'b1)) | ((outputPacket_TREADY_int_regslice == 1'b0) & (ap_predicate_op99_write_state3 == 1'b1)) | ((outputPacket_TREADY_int_regslice == 1'b0) & (ap_predicate_op95_write_state3 == 1'b1)) | ((state_load_reg_530_pp0_iter1_reg == 2'd3) & (outputPacket_TREADY_int_regslice == 1'b0)));
end

always @ (*) begin
    ap_block_state3_pp0_stage0_iter2 = (((outputPacketSize_TREADY_int_regslice == 1'b0) & (ap_predicate_op98_write_state3 == 1'b1)) | ((outputPacketSize_TREADY_int_regslice == 1'b0) & (ap_predicate_op96_write_state3 == 1'b1)) | ((outputPacket_TREADY_int_regslice == 1'b0) & (ap_predicate_op99_write_state3 == 1'b1)) | ((outputPacket_TREADY_int_regslice == 1'b0) & (ap_predicate_op95_write_state3 == 1'b1)) | ((state_load_reg_530_pp0_iter1_reg == 2'd3) & (outputPacket_TREADY_int_regslice == 1'b0)));
end

always @ (*) begin
    ap_block_state4_io = (((outputPacketSize_TREADY_int_regslice == 1'b0) & (ap_predicate_op128_write_state4 == 1'b1)) | ((outputPacketSize_TREADY_int_regslice == 1'b0) & (ap_predicate_op126_write_state4 == 1'b1)) | ((outputPacket_TREADY_int_regslice == 1'b0) & (ap_predicate_op129_write_state4 == 1'b1)) | ((outputPacket_TREADY_int_regslice == 1'b0) & (ap_predicate_op125_write_state4 == 1'b1)) | ((state_load_reg_530_pp0_iter2_reg == 2'd3) & (outputPacket_TREADY_int_regslice == 1'b0)));
end

always @ (*) begin
    ap_block_state4_pp0_stage0_iter3 = ((regslice_both_outputPacketSize_U_apdone_blk == 1'b1) | (regslice_both_outputPacket_V_data_V_U_apdone_blk == 1'b1) | ((outputPacketSize_TREADY_int_regslice == 1'b0) & (ap_predicate_op128_write_state4 == 1'b1)) | ((outputPacketSize_TREADY_int_regslice == 1'b0) & (ap_predicate_op126_write_state4 == 1'b1)) | ((outputPacket_TREADY_int_regslice == 1'b0) & (ap_predicate_op129_write_state4 == 1'b1)) | ((outputPacket_TREADY_int_regslice == 1'b0) & (ap_predicate_op125_write_state4 == 1'b1)) | ((state_load_reg_530_pp0_iter2_reg == 2'd3) & (outputPacket_TREADY_int_regslice == 1'b0)));
end

always @ (*) begin
    ap_condition_766 = ((p_vld_reg_595 == 1'd1) & (state_load_reg_530 == 2'd0) & (1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0));
end

always @ (*) begin
    ap_condition_771 = ((p_vld_reg_595 == 1'd1) & (state_load_reg_530 == 2'd0) & (ecn_q0 == 1'd1) & (ap_enable_reg_pp0_iter1 == 1'b1));
end

always @ (*) begin
    ap_condition_775 = ((state_load_load_fu_288_p1 == 2'd1) & (1'b1 == 1'b1) & (icmp_ln66_fu_388_p2 == 1'd0));
end

always @ (*) begin
    ap_condition_779 = ((p_vld_reg_595 == 1'd1) & (state_load_reg_530 == 2'd0) & (ecn_q0 == 1'd0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (tmp_last_V_1_reg_621 == 1'd0));
end

always @ (*) begin
    ap_condition_782 = ((p_vld_reg_595 == 1'd1) & (state_load_reg_530 == 2'd0) & (ecn_q0 == 1'd0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (tmp_last_V_1_reg_621 == 1'd1));
end

always @ (*) begin
    ap_condition_787 = ((state_load_load_fu_288_p1 == 2'd2) & (1'b1 == 1'b1) & (grp_fu_280_p1 == 1'd1) & (grp_fu_264_p1 == 1'd1));
end

always @ (*) begin
    ap_condition_791 = ((state_load_load_fu_288_p1 == 2'd3) & (1'b1 == 1'b1) & (tmp_last_V_2_load_fu_292_p1 == 1'd1));
end

always @ (*) begin
    ap_condition_794 = ((state_load_load_fu_288_p1 == 2'd1) & (1'b1 == 1'b1) & (icmp_ln66_fu_388_p2 == 1'd1));
end

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

assign ap_phi_reg_pp0_iter0_prevSize_flag_2_reg_193 = 'bx;

assign ap_phi_reg_pp0_iter1_prevSize_flag_1_reg_182 = 'bx;

assign ap_phi_reg_pp0_iter1_prevSize_new_2_reg_229 = 'bx;

always @ (*) begin
    ap_predicate_op125_write_state4 = ((state_load_reg_530_pp0_iter2_reg == 2'd2) & (p_vld1_reg_540_pp0_iter2_reg == 1'd1));
end

always @ (*) begin
    ap_predicate_op126_write_state4 = ((state_load_reg_530_pp0_iter2_reg == 2'd3) & (icmp_ln43_reg_641_pp0_iter2_reg == 1'd1));
end

always @ (*) begin
    ap_predicate_op128_write_state4 = ((ecnData_V_reg_645_pp0_iter2_reg == 1'd0) & (p_vld_reg_595_pp0_iter2_reg == 1'd1) & (state_load_reg_530_pp0_iter2_reg == 2'd0));
end

always @ (*) begin
    ap_predicate_op129_write_state4 = ((ecnData_V_reg_645_pp0_iter2_reg == 1'd0) & (p_vld_reg_595_pp0_iter2_reg == 1'd1) & (state_load_reg_530_pp0_iter2_reg == 2'd0));
end

always @ (*) begin
    ap_predicate_op57_read_state1 = ((inputPacketSize_read_nbread_fu_116_p2_0 == 1'd1) & (ap_sig_allocacmp_state_load == 2'd0));
end

always @ (*) begin
    ap_predicate_op95_write_state3 = ((state_load_reg_530_pp0_iter1_reg == 2'd2) & (p_vld1_reg_540_pp0_iter1_reg == 1'd1));
end

always @ (*) begin
    ap_predicate_op96_write_state3 = ((state_load_reg_530_pp0_iter1_reg == 2'd3) & (icmp_ln43_reg_641 == 1'd1));
end

always @ (*) begin
    ap_predicate_op98_write_state3 = ((ecnData_V_reg_645 == 1'd0) & (p_vld_reg_595_pp0_iter1_reg == 1'd1) & (state_load_reg_530_pp0_iter1_reg == 2'd0));
end

always @ (*) begin
    ap_predicate_op99_write_state3 = ((ecnData_V_reg_645 == 1'd0) & (p_vld_reg_595_pp0_iter1_reg == 1'd1) & (state_load_reg_530_pp0_iter1_reg == 2'd0));
end

always @ (*) begin
    ap_rst_n_inv = ~ap_rst_n;
end

assign ecn_address0 = zext_ln587_fu_470_p1;

assign grp_fu_264_p1 = grp_nbread_fu_102_p6_0;

assign grp_fu_280_p1 = inputPacket_TLAST_int_regslice;

assign grp_nbread_fu_102_p6_0 = inputPacket_TVALID_int_regslice;

assign icmp_ln43_fu_479_p2 = (($signed(prevSize) > $signed(32'd0)) ? 1'b1 : 1'b0);

assign icmp_ln66_fu_388_p2 = ((ap_sig_allocacmp_cycles_to_wait_load == 32'd0) ? 1'b1 : 1'b0);

assign inputPacketSize_TREADY = regslice_both_inputPacketSize_U_ack_in;

assign inputPacketSize_read_nbread_fu_116_p2_0 = inputPacketSize_TVALID_int_regslice;

assign inputPacket_TREADY = regslice_both_inputPacket_V_data_V_U_ack_in;

assign outputPacketSize_TVALID = regslice_both_outputPacketSize_U_vld_out;

assign outputPacket_TVALID = regslice_both_outputPacket_V_data_V_U_vld_out;

assign p_vld_fu_412_p1 = inputPacketSize_read_nbread_fu_116_p2_0;

assign shl_ln35_fu_497_p2 = tmp_reg_599 << 32'd1;

assign state_load_load_fu_288_p1 = ap_sig_allocacmp_state_load;

assign state_out = state_load_reg_530_pp0_iter2_reg;

assign tmp_data_V_1_fu_420_p1 = inputPacket_TDATA_int_regslice;

assign tmp_dest_V_1_fu_436_p1 = inputPacket_TDEST_int_regslice;

assign tmp_keep_V_1_fu_424_p1 = inputPacket_TKEEP_int_regslice;

assign tmp_last_V_1_fu_432_p1 = inputPacket_TLAST_int_regslice;

assign tmp_last_V_2_load_fu_292_p1 = prevData_last_V;

assign tmp_strb_V_1_fu_428_p1 = inputPacket_TSTRB_int_regslice;

assign zext_ln587_fu_470_p1 = inputPacket_TDEST_int_regslice;


reg find_kernel_block = 0;
// synthesis translate_off
`include "bandwidth_controller_hls_deadlock_kernel_monitor_top.vh"
// synthesis translate_on

endmodule //bandwidth_controller


// ==============================================================
// RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2022.1 (64-bit)
// Version: 2022.1
// Copyright (C) Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

(* CORE_GENERATION_INFO="startOfARP_startOfARP,hls_ip_2022_1,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xcu55c-fsvh2892-2L-e,HLS_INPUT_CLOCK=3.000000,HLS_INPUT_ARCH=pipeline,HLS_SYN_CLOCK=1.321375,HLS_SYN_LAT=2,HLS_SYN_TPT=1,HLS_SYN_MEM=0,HLS_SYN_DSP=0,HLS_SYN_FF=1378,HLS_SYN_LUT=107,HLS_VERSION=2022_1}" *)

module startOfARP (
        ap_clk,
        ap_rst_n,
        arp_in_TDATA,
        arp_in_TVALID,
        arp_in_TREADY,
        arp_in_TKEEP,
        arp_in_TSTRB,
        arp_in_TLAST,
        arp_interOut_TDATA,
        arp_interOut_TVALID,
        arp_interOut_TREADY,
        arp_interOut_TKEEP,
        arp_interOut_TSTRB,
        arp_interOut_TLAST,
        arp_out_TDATA,
        arp_out_TVALID,
        arp_out_TREADY,
        arp_out_TKEEP,
        arp_out_TSTRB,
        arp_out_TLAST,
        myMacAddress,
        myIpAddress
);

parameter    ap_ST_fsm_pp0_stage0 = 1'd1;

input   ap_clk;
input   ap_rst_n;
input  [511:0] arp_in_TDATA;
input   arp_in_TVALID;
output   arp_in_TREADY;
input  [63:0] arp_in_TKEEP;
input  [63:0] arp_in_TSTRB;
input  [0:0] arp_in_TLAST;
output  [511:0] arp_interOut_TDATA;
output   arp_interOut_TVALID;
input   arp_interOut_TREADY;
output  [63:0] arp_interOut_TKEEP;
output  [63:0] arp_interOut_TSTRB;
output  [0:0] arp_interOut_TLAST;
output  [511:0] arp_out_TDATA;
output   arp_out_TVALID;
input   arp_out_TREADY;
output  [63:0] arp_out_TKEEP;
output  [63:0] arp_out_TSTRB;
output  [0:0] arp_out_TLAST;
input  [47:0] myMacAddress;
input  [31:0] myIpAddress;

 reg    ap_rst_n_inv;
reg   [0:0] current_state;
reg   [511:0] p_in_data_V;
reg   [63:0] p_in_keep_V;
reg   [63:0] p_in_strb_V;
reg   [0:0] p_in_last_V;
reg    arp_interOut_TDATA_blk_n;
(* fsm_encoding = "none" *) reg   [0:0] ap_CS_fsm;
wire    ap_CS_fsm_pp0_stage0;
reg    ap_enable_reg_pp0_iter1;
wire    ap_block_pp0_stage0;
reg   [0:0] current_state_load_reg_406;
reg   [0:0] p_vld_reg_410;
reg   [0:0] icmp_ln1065_1_reg_446;
reg   [0:0] icmp_ln576_reg_438;
reg   [0:0] icmp_ln576_1_reg_442;
reg   [0:0] icmp_ln1065_reg_434;
reg    ap_enable_reg_pp0_iter2;
reg   [0:0] current_state_load_reg_406_pp0_iter1_reg;
reg   [0:0] p_vld_reg_410_pp0_iter1_reg;
reg   [0:0] icmp_ln1065_1_reg_446_pp0_iter1_reg;
reg   [0:0] icmp_ln576_reg_438_pp0_iter1_reg;
reg   [0:0] icmp_ln576_1_reg_442_pp0_iter1_reg;
reg   [0:0] icmp_ln1065_reg_434_pp0_iter1_reg;
reg    arp_out_TDATA_blk_n;
reg   [31:0] myIpAddress_read_reg_395;
wire    ap_block_state1_pp0_stage0_iter0;
reg    ap_predicate_op60_write_state2;
reg    ap_block_state2_pp0_stage0_iter1;
reg    ap_block_state2_io;
reg    ap_predicate_op72_write_state3;
wire    regslice_both_arp_interOut_V_data_V_U_apdone_blk;
wire    regslice_both_arp_out_V_data_V_U_apdone_blk;
reg    ap_block_state3_pp0_stage0_iter2;
reg    ap_block_state3_io;
reg    ap_block_pp0_stage0_11001;
reg   [47:0] myMacAddress_read_reg_400;
wire   [0:0] current_state_load_load_fu_178_p1;
wire   [0:0] p_vld_fu_182_p1;
reg   [511:0] tmp_data_V_2_reg_414;
reg   [63:0] tmp_keep_V_1_reg_419;
reg   [63:0] tmp_strb_V_1_reg_424;
reg   [0:0] tmp_last_V_1_reg_429;
wire   [0:0] icmp_ln1065_fu_236_p2;
wire   [0:0] icmp_ln576_fu_256_p2;
wire   [0:0] icmp_ln576_1_fu_276_p2;
wire   [0:0] icmp_ln1065_1_fu_292_p2;
reg    ap_block_pp0_stage0_subdone;
wire   [0:0] empty_nbread_fu_134_p5_0;
reg    ap_block_pp0_stage0_01001;
wire   [15:0] tmp_s_fu_226_p4;
wire   [34:0] tmp_1_fu_242_p4;
wire   [34:0] trunc_ln674_fu_252_p1;
wire   [18:0] tmp_2_fu_262_p4;
wire   [18:0] trunc_ln674_1_fu_272_p1;
wire   [31:0] tmp_3_fu_282_p4;
wire   [47:0] tmp_fu_329_p4;
wire   [511:0] p_Result_s_fu_339_p5;
wire   [79:0] tmp_5_fu_362_p4;
wire   [511:0] p_Result_1_fu_351_p5;
wire   [175:0] tmp_6_fu_372_p5;
reg   [0:0] ap_NS_fsm;
wire    ap_reset_idle_pp0;
reg    ap_idle_pp0;
wire    ap_enable_pp0;
wire    regslice_both_arp_in_V_data_V_U_apdone_blk;
wire   [511:0] arp_in_TDATA_int_regslice;
wire    arp_in_TVALID_int_regslice;
reg    arp_in_TREADY_int_regslice;
wire    regslice_both_arp_in_V_data_V_U_ack_in;
wire    regslice_both_arp_in_V_keep_V_U_apdone_blk;
wire   [63:0] arp_in_TKEEP_int_regslice;
wire    regslice_both_arp_in_V_keep_V_U_vld_out;
wire    regslice_both_arp_in_V_keep_V_U_ack_in;
wire    regslice_both_arp_in_V_strb_V_U_apdone_blk;
wire   [63:0] arp_in_TSTRB_int_regslice;
wire    regslice_both_arp_in_V_strb_V_U_vld_out;
wire    regslice_both_arp_in_V_strb_V_U_ack_in;
wire    regslice_both_arp_in_V_last_V_U_apdone_blk;
wire   [0:0] arp_in_TLAST_int_regslice;
wire    regslice_both_arp_in_V_last_V_U_vld_out;
wire    regslice_both_arp_in_V_last_V_U_ack_in;
reg    arp_interOut_TVALID_int_regslice;
wire    arp_interOut_TREADY_int_regslice;
wire    regslice_both_arp_interOut_V_data_V_U_vld_out;
wire    regslice_both_arp_interOut_V_keep_V_U_apdone_blk;
wire    regslice_both_arp_interOut_V_keep_V_U_ack_in_dummy;
wire    regslice_both_arp_interOut_V_keep_V_U_vld_out;
wire    regslice_both_arp_interOut_V_strb_V_U_apdone_blk;
wire    regslice_both_arp_interOut_V_strb_V_U_ack_in_dummy;
wire    regslice_both_arp_interOut_V_strb_V_U_vld_out;
wire    regslice_both_arp_interOut_V_last_V_U_apdone_blk;
wire    regslice_both_arp_interOut_V_last_V_U_ack_in_dummy;
wire    regslice_both_arp_interOut_V_last_V_U_vld_out;
wire   [511:0] arp_out_TDATA_int_regslice;
reg    arp_out_TVALID_int_regslice;
wire    arp_out_TREADY_int_regslice;
wire    regslice_both_arp_out_V_data_V_U_vld_out;
wire    regslice_both_arp_out_V_keep_V_U_apdone_blk;
wire    regslice_both_arp_out_V_keep_V_U_ack_in_dummy;
wire    regslice_both_arp_out_V_keep_V_U_vld_out;
wire    regslice_both_arp_out_V_strb_V_U_apdone_blk;
wire    regslice_both_arp_out_V_strb_V_U_ack_in_dummy;
wire    regslice_both_arp_out_V_strb_V_U_vld_out;
wire    regslice_both_arp_out_V_last_V_U_apdone_blk;
wire    regslice_both_arp_out_V_last_V_U_ack_in_dummy;
wire    regslice_both_arp_out_V_last_V_U_vld_out;
reg    ap_condition_208;
reg    ap_condition_204;
wire    ap_ce_reg;

// power-on initialization
initial begin
#0 current_state = 1'd0;
#0 p_in_data_V = 512'd0;
#0 p_in_keep_V = 64'd0;
#0 p_in_strb_V = 64'd0;
#0 p_in_last_V = 1'd0;
#0 ap_CS_fsm = 1'd1;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
#0 ap_enable_reg_pp0_iter2 = 1'b0;
end

startOfARP_regslice_both #(
    .DataWidth( 512 ))
regslice_both_arp_in_V_data_V_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst_n_inv),
    .data_in(arp_in_TDATA),
    .vld_in(arp_in_TVALID),
    .ack_in(regslice_both_arp_in_V_data_V_U_ack_in),
    .data_out(arp_in_TDATA_int_regslice),
    .vld_out(arp_in_TVALID_int_regslice),
    .ack_out(arp_in_TREADY_int_regslice),
    .apdone_blk(regslice_both_arp_in_V_data_V_U_apdone_blk)
);

startOfARP_regslice_both #(
    .DataWidth( 64 ))
regslice_both_arp_in_V_keep_V_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst_n_inv),
    .data_in(arp_in_TKEEP),
    .vld_in(arp_in_TVALID),
    .ack_in(regslice_both_arp_in_V_keep_V_U_ack_in),
    .data_out(arp_in_TKEEP_int_regslice),
    .vld_out(regslice_both_arp_in_V_keep_V_U_vld_out),
    .ack_out(arp_in_TREADY_int_regslice),
    .apdone_blk(regslice_both_arp_in_V_keep_V_U_apdone_blk)
);

startOfARP_regslice_both #(
    .DataWidth( 64 ))
regslice_both_arp_in_V_strb_V_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst_n_inv),
    .data_in(arp_in_TSTRB),
    .vld_in(arp_in_TVALID),
    .ack_in(regslice_both_arp_in_V_strb_V_U_ack_in),
    .data_out(arp_in_TSTRB_int_regslice),
    .vld_out(regslice_both_arp_in_V_strb_V_U_vld_out),
    .ack_out(arp_in_TREADY_int_regslice),
    .apdone_blk(regslice_both_arp_in_V_strb_V_U_apdone_blk)
);

startOfARP_regslice_both #(
    .DataWidth( 1 ))
regslice_both_arp_in_V_last_V_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst_n_inv),
    .data_in(arp_in_TLAST),
    .vld_in(arp_in_TVALID),
    .ack_in(regslice_both_arp_in_V_last_V_U_ack_in),
    .data_out(arp_in_TLAST_int_regslice),
    .vld_out(regslice_both_arp_in_V_last_V_U_vld_out),
    .ack_out(arp_in_TREADY_int_regslice),
    .apdone_blk(regslice_both_arp_in_V_last_V_U_apdone_blk)
);

startOfARP_regslice_both #(
    .DataWidth( 512 ))
regslice_both_arp_interOut_V_data_V_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst_n_inv),
    .data_in(tmp_data_V_2_reg_414),
    .vld_in(arp_interOut_TVALID_int_regslice),
    .ack_in(arp_interOut_TREADY_int_regslice),
    .data_out(arp_interOut_TDATA),
    .vld_out(regslice_both_arp_interOut_V_data_V_U_vld_out),
    .ack_out(arp_interOut_TREADY),
    .apdone_blk(regslice_both_arp_interOut_V_data_V_U_apdone_blk)
);

startOfARP_regslice_both #(
    .DataWidth( 64 ))
regslice_both_arp_interOut_V_keep_V_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst_n_inv),
    .data_in(tmp_keep_V_1_reg_419),
    .vld_in(arp_interOut_TVALID_int_regslice),
    .ack_in(regslice_both_arp_interOut_V_keep_V_U_ack_in_dummy),
    .data_out(arp_interOut_TKEEP),
    .vld_out(regslice_both_arp_interOut_V_keep_V_U_vld_out),
    .ack_out(arp_interOut_TREADY),
    .apdone_blk(regslice_both_arp_interOut_V_keep_V_U_apdone_blk)
);

startOfARP_regslice_both #(
    .DataWidth( 64 ))
regslice_both_arp_interOut_V_strb_V_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst_n_inv),
    .data_in(tmp_strb_V_1_reg_424),
    .vld_in(arp_interOut_TVALID_int_regslice),
    .ack_in(regslice_both_arp_interOut_V_strb_V_U_ack_in_dummy),
    .data_out(arp_interOut_TSTRB),
    .vld_out(regslice_both_arp_interOut_V_strb_V_U_vld_out),
    .ack_out(arp_interOut_TREADY),
    .apdone_blk(regslice_both_arp_interOut_V_strb_V_U_apdone_blk)
);

startOfARP_regslice_both #(
    .DataWidth( 1 ))
regslice_both_arp_interOut_V_last_V_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst_n_inv),
    .data_in(tmp_last_V_1_reg_429),
    .vld_in(arp_interOut_TVALID_int_regslice),
    .ack_in(regslice_both_arp_interOut_V_last_V_U_ack_in_dummy),
    .data_out(arp_interOut_TLAST),
    .vld_out(regslice_both_arp_interOut_V_last_V_U_vld_out),
    .ack_out(arp_interOut_TREADY),
    .apdone_blk(regslice_both_arp_interOut_V_last_V_U_apdone_blk)
);

startOfARP_regslice_both #(
    .DataWidth( 512 ))
regslice_both_arp_out_V_data_V_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst_n_inv),
    .data_in(arp_out_TDATA_int_regslice),
    .vld_in(arp_out_TVALID_int_regslice),
    .ack_in(arp_out_TREADY_int_regslice),
    .data_out(arp_out_TDATA),
    .vld_out(regslice_both_arp_out_V_data_V_U_vld_out),
    .ack_out(arp_out_TREADY),
    .apdone_blk(regslice_both_arp_out_V_data_V_U_apdone_blk)
);

startOfARP_regslice_both #(
    .DataWidth( 64 ))
regslice_both_arp_out_V_keep_V_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst_n_inv),
    .data_in(p_in_keep_V),
    .vld_in(arp_out_TVALID_int_regslice),
    .ack_in(regslice_both_arp_out_V_keep_V_U_ack_in_dummy),
    .data_out(arp_out_TKEEP),
    .vld_out(regslice_both_arp_out_V_keep_V_U_vld_out),
    .ack_out(arp_out_TREADY),
    .apdone_blk(regslice_both_arp_out_V_keep_V_U_apdone_blk)
);

startOfARP_regslice_both #(
    .DataWidth( 64 ))
regslice_both_arp_out_V_strb_V_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst_n_inv),
    .data_in(p_in_strb_V),
    .vld_in(arp_out_TVALID_int_regslice),
    .ack_in(regslice_both_arp_out_V_strb_V_U_ack_in_dummy),
    .data_out(arp_out_TSTRB),
    .vld_out(regslice_both_arp_out_V_strb_V_U_vld_out),
    .ack_out(arp_out_TREADY),
    .apdone_blk(regslice_both_arp_out_V_strb_V_U_apdone_blk)
);

startOfARP_regslice_both #(
    .DataWidth( 1 ))
regslice_both_arp_out_V_last_V_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst_n_inv),
    .data_in(p_in_last_V),
    .vld_in(arp_out_TVALID_int_regslice),
    .ack_in(regslice_both_arp_out_V_last_V_U_ack_in_dummy),
    .data_out(arp_out_TLAST),
    .vld_out(regslice_both_arp_out_V_last_V_U_vld_out),
    .ack_out(arp_out_TREADY),
    .apdone_blk(regslice_both_arp_out_V_last_V_U_apdone_blk)
);

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_pp0_stage0;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            ap_enable_reg_pp0_iter1 <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp0_iter2 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_condition_204)) begin
        if ((current_state_load_load_fu_178_p1 == 1'd1)) begin
            current_state <= 1'd0;
        end else if ((1'b1 == ap_condition_208)) begin
            current_state <= 1'd1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        current_state_load_reg_406 <= current_state;
        current_state_load_reg_406_pp0_iter1_reg <= current_state_load_reg_406;
        icmp_ln1065_1_reg_446_pp0_iter1_reg <= icmp_ln1065_1_reg_446;
        icmp_ln1065_reg_434_pp0_iter1_reg <= icmp_ln1065_reg_434;
        icmp_ln576_1_reg_442_pp0_iter1_reg <= icmp_ln576_1_reg_442;
        icmp_ln576_reg_438_pp0_iter1_reg <= icmp_ln576_reg_438;
        myIpAddress_read_reg_395 <= myIpAddress;
        myMacAddress_read_reg_400 <= myMacAddress;
        p_vld_reg_410_pp0_iter1_reg <= p_vld_reg_410;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0) & (((icmp_ln576_fu_256_p2 == 1'd0) & (icmp_ln1065_fu_236_p2 == 1'd1) & (p_vld_fu_182_p1 == 1'd1) & (current_state_load_load_fu_178_p1 == 1'd0)) | ((icmp_ln576_1_fu_276_p2 == 1'd0) & (icmp_ln1065_fu_236_p2 == 1'd1) & (p_vld_fu_182_p1 == 1'd1) & (current_state_load_load_fu_178_p1 == 1'd0))))) begin
        icmp_ln1065_1_reg_446 <= icmp_ln1065_1_fu_292_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0) & (p_vld_fu_182_p1 == 1'd1) & (current_state_load_load_fu_178_p1 == 1'd0))) begin
        icmp_ln1065_reg_434 <= icmp_ln1065_fu_236_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0) & (icmp_ln576_fu_256_p2 == 1'd1) & (icmp_ln1065_fu_236_p2 == 1'd1) & (p_vld_fu_182_p1 == 1'd1) & (current_state_load_load_fu_178_p1 == 1'd0))) begin
        icmp_ln576_1_reg_442 <= icmp_ln576_1_fu_276_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0) & (icmp_ln1065_fu_236_p2 == 1'd1) & (p_vld_fu_182_p1 == 1'd1) & (current_state_load_load_fu_178_p1 == 1'd0))) begin
        icmp_ln576_reg_438 <= icmp_ln576_fu_256_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b1 == 1'b1) & (p_vld_fu_182_p1 == 1'd1) & (current_state_load_load_fu_178_p1 == 1'd0))) begin
        p_in_data_V <= arp_in_TDATA_int_regslice;
        p_in_keep_V <= arp_in_TKEEP_int_regslice;
        p_in_last_V <= arp_in_TLAST_int_regslice;
        p_in_strb_V <= arp_in_TSTRB_int_regslice;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0) & (current_state_load_load_fu_178_p1 == 1'd0))) begin
        p_vld_reg_410 <= empty_nbread_fu_134_p5_0;
        tmp_data_V_2_reg_414 <= arp_in_TDATA_int_regslice;
        tmp_keep_V_1_reg_419 <= arp_in_TKEEP_int_regslice;
        tmp_last_V_1_reg_429 <= arp_in_TLAST_int_regslice;
        tmp_strb_V_1_reg_424 <= arp_in_TSTRB_int_regslice;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter2 == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b0) & (1'b1 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

assign ap_reset_idle_pp0 = 1'b0;

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (arp_in_TVALID_int_regslice == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b1 == 1'b1) & (current_state_load_load_fu_178_p1 == 1'd0))) begin
        arp_in_TREADY_int_regslice = 1'b1;
    end else begin
        arp_in_TREADY_int_regslice = 1'b0;
    end
end

always @ (*) begin
    if ((((ap_enable_reg_pp0_iter2 == 1'b1) & (1'b0 == ap_block_pp0_stage0) & ((((icmp_ln576_1_reg_442_pp0_iter1_reg == 1'd1) & (icmp_ln576_reg_438_pp0_iter1_reg == 1'd1) & (p_vld_reg_410_pp0_iter1_reg == 1'd1) & (current_state_load_reg_406_pp0_iter1_reg == 1'd0)) | ((icmp_ln1065_1_reg_446_pp0_iter1_reg == 1'd0) & (p_vld_reg_410_pp0_iter1_reg == 1'd1) & (current_state_load_reg_406_pp0_iter1_reg == 1'd0))) | ((icmp_ln1065_reg_434_pp0_iter1_reg == 1'd0) & (p_vld_reg_410_pp0_iter1_reg == 1'd1) & (current_state_load_reg_406_pp0_iter1_reg == 1'd0)))) | ((1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & ((((icmp_ln576_1_reg_442 == 1'd1) & (icmp_ln576_reg_438 == 1'd1) & (p_vld_reg_410 == 1'd1) & (current_state_load_reg_406 == 1'd0)) | ((icmp_ln1065_1_reg_446 == 1'd0) & (p_vld_reg_410 == 1'd1) & (current_state_load_reg_406 == 1'd0))) | ((icmp_ln1065_reg_434 == 1'd0) & (p_vld_reg_410 == 1'd1) & (current_state_load_reg_406 == 1'd0)))))) begin
        arp_interOut_TDATA_blk_n = arp_interOut_TREADY_int_regslice;
    end else begin
        arp_interOut_TDATA_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_predicate_op60_write_state2 == 1'b1))) begin
        arp_interOut_TVALID_int_regslice = 1'b1;
    end else begin
        arp_interOut_TVALID_int_regslice = 1'b0;
    end
end

always @ (*) begin
    if ((((current_state_load_reg_406_pp0_iter1_reg == 1'd1) & (ap_enable_reg_pp0_iter2 == 1'b1) & (1'b0 == ap_block_pp0_stage0)) | ((current_state_load_reg_406 == 1'd1) & (1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0)))) begin
        arp_out_TDATA_blk_n = arp_out_TREADY_int_regslice;
    end else begin
        arp_out_TDATA_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((current_state_load_reg_406 == 1'd1) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        arp_out_TVALID_int_regslice = 1'b1;
    end else begin
        arp_out_TVALID_int_regslice = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_pp0_stage0 : begin
            ap_NS_fsm = ap_ST_fsm_pp0_stage0;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd0];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp0_stage0_01001 = (((ap_enable_reg_pp0_iter2 == 1'b1) & ((regslice_both_arp_out_V_data_V_U_apdone_blk == 1'b1) | (regslice_both_arp_interOut_V_data_V_U_apdone_blk == 1'b1) | ((arp_interOut_TREADY_int_regslice == 1'b0) & (ap_predicate_op72_write_state3 == 1'b1)) | ((current_state_load_reg_406_pp0_iter1_reg == 1'd1) & (arp_out_TREADY_int_regslice == 1'b0)))) | ((ap_enable_reg_pp0_iter1 == 1'b1) & (((arp_interOut_TREADY_int_regslice == 1'b0) & (ap_predicate_op60_write_state2 == 1'b1)) | ((current_state_load_reg_406 == 1'd1) & (arp_out_TREADY_int_regslice == 1'b0)))));
end

always @ (*) begin
    ap_block_pp0_stage0_11001 = (((ap_enable_reg_pp0_iter2 == 1'b1) & ((1'b1 == ap_block_state3_io) | (regslice_both_arp_out_V_data_V_U_apdone_blk == 1'b1) | (regslice_both_arp_interOut_V_data_V_U_apdone_blk == 1'b1) | ((arp_interOut_TREADY_int_regslice == 1'b0) & (ap_predicate_op72_write_state3 == 1'b1)) | ((current_state_load_reg_406_pp0_iter1_reg == 1'd1) & (arp_out_TREADY_int_regslice == 1'b0)))) | ((ap_enable_reg_pp0_iter1 == 1'b1) & ((1'b1 == ap_block_state2_io) | ((arp_interOut_TREADY_int_regslice == 1'b0) & (ap_predicate_op60_write_state2 == 1'b1)) | ((current_state_load_reg_406 == 1'd1) & (arp_out_TREADY_int_regslice == 1'b0)))));
end

always @ (*) begin
    ap_block_pp0_stage0_subdone = (((ap_enable_reg_pp0_iter2 == 1'b1) & ((1'b1 == ap_block_state3_io) | (regslice_both_arp_out_V_data_V_U_apdone_blk == 1'b1) | (regslice_both_arp_interOut_V_data_V_U_apdone_blk == 1'b1) | ((arp_interOut_TREADY_int_regslice == 1'b0) & (ap_predicate_op72_write_state3 == 1'b1)) | ((current_state_load_reg_406_pp0_iter1_reg == 1'd1) & (arp_out_TREADY_int_regslice == 1'b0)))) | ((ap_enable_reg_pp0_iter1 == 1'b1) & ((1'b1 == ap_block_state2_io) | ((arp_interOut_TREADY_int_regslice == 1'b0) & (ap_predicate_op60_write_state2 == 1'b1)) | ((current_state_load_reg_406 == 1'd1) & (arp_out_TREADY_int_regslice == 1'b0)))));
end

assign ap_block_state1_pp0_stage0_iter0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_state2_io = (((arp_interOut_TREADY_int_regslice == 1'b0) & (ap_predicate_op60_write_state2 == 1'b1)) | ((current_state_load_reg_406 == 1'd1) & (arp_out_TREADY_int_regslice == 1'b0)));
end

always @ (*) begin
    ap_block_state2_pp0_stage0_iter1 = (((arp_interOut_TREADY_int_regslice == 1'b0) & (ap_predicate_op60_write_state2 == 1'b1)) | ((current_state_load_reg_406 == 1'd1) & (arp_out_TREADY_int_regslice == 1'b0)));
end

always @ (*) begin
    ap_block_state3_io = (((arp_interOut_TREADY_int_regslice == 1'b0) & (ap_predicate_op72_write_state3 == 1'b1)) | ((current_state_load_reg_406_pp0_iter1_reg == 1'd1) & (arp_out_TREADY_int_regslice == 1'b0)));
end

always @ (*) begin
    ap_block_state3_pp0_stage0_iter2 = ((regslice_both_arp_out_V_data_V_U_apdone_blk == 1'b1) | (regslice_both_arp_interOut_V_data_V_U_apdone_blk == 1'b1) | ((arp_interOut_TREADY_int_regslice == 1'b0) & (ap_predicate_op72_write_state3 == 1'b1)) | ((current_state_load_reg_406_pp0_iter1_reg == 1'd1) & (arp_out_TREADY_int_regslice == 1'b0)));
end

always @ (*) begin
    ap_condition_204 = ((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b1 == 1'b1));
end

always @ (*) begin
    ap_condition_208 = (((icmp_ln1065_1_fu_292_p2 == 1'd1) & (icmp_ln576_fu_256_p2 == 1'd0) & (icmp_ln1065_fu_236_p2 == 1'd1) & (p_vld_fu_182_p1 == 1'd1) & (current_state_load_load_fu_178_p1 == 1'd0)) | ((icmp_ln1065_1_fu_292_p2 == 1'd1) & (icmp_ln576_1_fu_276_p2 == 1'd0) & (icmp_ln1065_fu_236_p2 == 1'd1) & (p_vld_fu_182_p1 == 1'd1) & (current_state_load_load_fu_178_p1 == 1'd0)));
end

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

always @ (*) begin
    ap_predicate_op60_write_state2 = ((((icmp_ln576_1_reg_442 == 1'd1) & (icmp_ln576_reg_438 == 1'd1) & (p_vld_reg_410 == 1'd1) & (current_state_load_reg_406 == 1'd0)) | ((icmp_ln1065_1_reg_446 == 1'd0) & (p_vld_reg_410 == 1'd1) & (current_state_load_reg_406 == 1'd0))) | ((icmp_ln1065_reg_434 == 1'd0) & (p_vld_reg_410 == 1'd1) & (current_state_load_reg_406 == 1'd0)));
end

always @ (*) begin
    ap_predicate_op72_write_state3 = ((((icmp_ln576_1_reg_442_pp0_iter1_reg == 1'd1) & (icmp_ln576_reg_438_pp0_iter1_reg == 1'd1) & (p_vld_reg_410_pp0_iter1_reg == 1'd1) & (current_state_load_reg_406_pp0_iter1_reg == 1'd0)) | ((icmp_ln1065_1_reg_446_pp0_iter1_reg == 1'd0) & (p_vld_reg_410_pp0_iter1_reg == 1'd1) & (current_state_load_reg_406_pp0_iter1_reg == 1'd0))) | ((icmp_ln1065_reg_434_pp0_iter1_reg == 1'd0) & (p_vld_reg_410_pp0_iter1_reg == 1'd1) & (current_state_load_reg_406_pp0_iter1_reg == 1'd0)));
end

always @ (*) begin
    ap_rst_n_inv = ~ap_rst_n;
end

assign arp_in_TREADY = regslice_both_arp_in_V_data_V_U_ack_in;

assign arp_interOut_TVALID = regslice_both_arp_interOut_V_data_V_U_vld_out;

assign arp_out_TDATA_int_regslice = {{p_Result_1_fu_351_p5[511:336]}, {tmp_6_fu_372_p5}, {p_Result_1_fu_351_p5[159:0]}};

assign arp_out_TVALID = regslice_both_arp_out_V_data_V_U_vld_out;

assign current_state_load_load_fu_178_p1 = current_state;

assign empty_nbread_fu_134_p5_0 = arp_in_TVALID_int_regslice;

assign icmp_ln1065_1_fu_292_p2 = ((tmp_3_fu_282_p4 == myIpAddress) ? 1'b1 : 1'b0);

assign icmp_ln1065_fu_236_p2 = ((tmp_s_fu_226_p4 == 16'd256) ? 1'b1 : 1'b0);

assign icmp_ln576_1_fu_276_p2 = ((tmp_2_fu_262_p4 == trunc_ln674_1_fu_272_p1) ? 1'b1 : 1'b0);

assign icmp_ln576_fu_256_p2 = ((tmp_1_fu_242_p4 == trunc_ln674_fu_252_p1) ? 1'b1 : 1'b0);

assign p_Result_1_fu_351_p5 = {{p_Result_s_fu_339_p5[511:96]}, {myMacAddress_read_reg_400}, {p_Result_s_fu_339_p5[47:0]}};

assign p_Result_s_fu_339_p5 = {{p_in_data_V[511:48]}, {tmp_fu_329_p4}};

assign p_vld_fu_182_p1 = empty_nbread_fu_134_p5_0;

assign tmp_1_fu_242_p4 = {{arp_in_TDATA_int_regslice[210:176]}};

assign tmp_2_fu_262_p4 = {{arp_in_TDATA_int_regslice[242:224]}};

assign tmp_3_fu_282_p4 = {{arp_in_TDATA_int_regslice[335:304]}};

assign tmp_5_fu_362_p4 = {{p_in_data_V[255:176]}};

assign tmp_6_fu_372_p5 = {{{{tmp_5_fu_362_p4}, {myIpAddress_read_reg_395}}, {myMacAddress_read_reg_400}}, {16'd512}};

assign tmp_fu_329_p4 = {{p_in_data_V[95:48]}};

assign tmp_s_fu_226_p4 = {{arp_in_TDATA_int_regslice[175:160]}};

assign trunc_ln674_1_fu_272_p1 = myIpAddress[18:0];

assign trunc_ln674_fu_252_p1 = myMacAddress[34:0];


reg find_kernel_block = 0;
// synthesis translate_off
`include "startOfARP_hls_deadlock_kernel_monitor_top.vh"
// synthesis translate_on

endmodule //startOfARP


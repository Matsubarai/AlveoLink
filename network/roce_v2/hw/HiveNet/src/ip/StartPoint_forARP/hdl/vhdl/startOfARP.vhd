-- ==============================================================
-- RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2022.1 (64-bit)
-- Version: 2022.1
-- Copyright (C) Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity startOfARP is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst_n : IN STD_LOGIC;
    arp_in_TDATA : IN STD_LOGIC_VECTOR (511 downto 0);
    arp_in_TVALID : IN STD_LOGIC;
    arp_in_TREADY : OUT STD_LOGIC;
    arp_in_TKEEP : IN STD_LOGIC_VECTOR (63 downto 0);
    arp_in_TSTRB : IN STD_LOGIC_VECTOR (63 downto 0);
    arp_in_TLAST : IN STD_LOGIC_VECTOR (0 downto 0);
    arp_interOut_TDATA : OUT STD_LOGIC_VECTOR (511 downto 0);
    arp_interOut_TVALID : OUT STD_LOGIC;
    arp_interOut_TREADY : IN STD_LOGIC;
    arp_interOut_TKEEP : OUT STD_LOGIC_VECTOR (63 downto 0);
    arp_interOut_TSTRB : OUT STD_LOGIC_VECTOR (63 downto 0);
    arp_interOut_TLAST : OUT STD_LOGIC_VECTOR (0 downto 0);
    arp_out_TDATA : OUT STD_LOGIC_VECTOR (511 downto 0);
    arp_out_TVALID : OUT STD_LOGIC;
    arp_out_TREADY : IN STD_LOGIC;
    arp_out_TKEEP : OUT STD_LOGIC_VECTOR (63 downto 0);
    arp_out_TSTRB : OUT STD_LOGIC_VECTOR (63 downto 0);
    arp_out_TLAST : OUT STD_LOGIC_VECTOR (0 downto 0);
    myMacAddress : IN STD_LOGIC_VECTOR (47 downto 0);
    myIpAddress : IN STD_LOGIC_VECTOR (31 downto 0) );
end;


architecture behav of startOfARP is 
    attribute CORE_GENERATION_INFO : STRING;
    attribute CORE_GENERATION_INFO of behav : architecture is
    "startOfARP_startOfARP,hls_ip_2022_1,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xcu55c-fsvh2892-2L-e,HLS_INPUT_CLOCK=3.000000,HLS_INPUT_ARCH=pipeline,HLS_SYN_CLOCK=1.321375,HLS_SYN_LAT=2,HLS_SYN_TPT=1,HLS_SYN_MEM=0,HLS_SYN_DSP=0,HLS_SYN_FF=1378,HLS_SYN_LUT=107,HLS_VERSION=2022_1}";
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_pp0_stage0 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_boolean_0 : BOOLEAN := false;
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_A0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000010100000";
    constant ap_const_lv32_AF : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000010101111";
    constant ap_const_lv16_100 : STD_LOGIC_VECTOR (15 downto 0) := "0000000100000000";
    constant ap_const_lv32_B0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000010110000";
    constant ap_const_lv32_D2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000011010010";
    constant ap_const_lv32_E0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000011100000";
    constant ap_const_lv32_F2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000011110010";
    constant ap_const_lv32_130 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000100110000";
    constant ap_const_lv32_14F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000101001111";
    constant ap_const_lv32_30 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000110000";
    constant ap_const_lv32_5F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001011111";
    constant ap_const_lv32_2F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000101111";
    constant ap_const_lv32_FF : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000011111111";
    constant ap_const_lv16_200 : STD_LOGIC_VECTOR (15 downto 0) := "0000001000000000";

    signal ap_rst_n_inv : STD_LOGIC;
    signal current_state : STD_LOGIC_VECTOR (0 downto 0) := "0";
    signal p_in_data_V : STD_LOGIC_VECTOR (511 downto 0) := "00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    signal p_in_keep_V : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000";
    signal p_in_strb_V : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000";
    signal p_in_last_V : STD_LOGIC_VECTOR (0 downto 0) := "0";
    signal arp_interOut_TDATA_blk_n : STD_LOGIC;
    signal ap_CS_fsm : STD_LOGIC_VECTOR (0 downto 0) := "1";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_pp0_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage0 : signal is "none";
    signal ap_enable_reg_pp0_iter1 : STD_LOGIC := '0';
    signal ap_block_pp0_stage0 : BOOLEAN;
    signal current_state_load_reg_406 : STD_LOGIC_VECTOR (0 downto 0);
    signal p_vld_reg_410 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln1065_1_reg_446 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln576_reg_438 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln576_1_reg_442 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln1065_reg_434 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_enable_reg_pp0_iter2 : STD_LOGIC := '0';
    signal current_state_load_reg_406_pp0_iter1_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal p_vld_reg_410_pp0_iter1_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln1065_1_reg_446_pp0_iter1_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln576_reg_438_pp0_iter1_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln576_1_reg_442_pp0_iter1_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln1065_reg_434_pp0_iter1_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal arp_out_TDATA_blk_n : STD_LOGIC;
    signal myIpAddress_read_reg_395 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_block_state1_pp0_stage0_iter0 : BOOLEAN;
    signal ap_predicate_op60_write_state2 : BOOLEAN;
    signal ap_block_state2_pp0_stage0_iter1 : BOOLEAN;
    signal ap_block_state2_io : BOOLEAN;
    signal ap_predicate_op72_write_state3 : BOOLEAN;
    signal regslice_both_arp_interOut_V_data_V_U_apdone_blk : STD_LOGIC;
    signal regslice_both_arp_out_V_data_V_U_apdone_blk : STD_LOGIC;
    signal ap_block_state3_pp0_stage0_iter2 : BOOLEAN;
    signal ap_block_state3_io : BOOLEAN;
    signal ap_block_pp0_stage0_11001 : BOOLEAN;
    signal myMacAddress_read_reg_400 : STD_LOGIC_VECTOR (47 downto 0);
    signal current_state_load_load_fu_178_p1 : STD_LOGIC_VECTOR (0 downto 0);
    signal p_vld_fu_182_p1 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_data_V_2_reg_414 : STD_LOGIC_VECTOR (511 downto 0);
    signal tmp_keep_V_1_reg_419 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_strb_V_1_reg_424 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_last_V_1_reg_429 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln1065_fu_236_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln576_fu_256_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln576_1_fu_276_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln1065_1_fu_292_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_block_pp0_stage0_subdone : BOOLEAN;
    signal empty_nbread_fu_134_p5_0 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_block_pp0_stage0_01001 : BOOLEAN;
    signal tmp_s_fu_226_p4 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_1_fu_242_p4 : STD_LOGIC_VECTOR (34 downto 0);
    signal trunc_ln674_fu_252_p1 : STD_LOGIC_VECTOR (34 downto 0);
    signal tmp_2_fu_262_p4 : STD_LOGIC_VECTOR (18 downto 0);
    signal trunc_ln674_1_fu_272_p1 : STD_LOGIC_VECTOR (18 downto 0);
    signal tmp_3_fu_282_p4 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_fu_329_p4 : STD_LOGIC_VECTOR (47 downto 0);
    signal p_Result_s_fu_339_p5 : STD_LOGIC_VECTOR (511 downto 0);
    signal tmp_5_fu_362_p4 : STD_LOGIC_VECTOR (79 downto 0);
    signal p_Result_1_fu_351_p5 : STD_LOGIC_VECTOR (511 downto 0);
    signal tmp_6_fu_372_p5 : STD_LOGIC_VECTOR (175 downto 0);
    signal ap_NS_fsm : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_reset_idle_pp0 : STD_LOGIC;
    signal ap_idle_pp0 : STD_LOGIC;
    signal ap_enable_pp0 : STD_LOGIC;
    signal regslice_both_arp_in_V_data_V_U_apdone_blk : STD_LOGIC;
    signal arp_in_TDATA_int_regslice : STD_LOGIC_VECTOR (511 downto 0);
    signal arp_in_TVALID_int_regslice : STD_LOGIC;
    signal arp_in_TREADY_int_regslice : STD_LOGIC;
    signal regslice_both_arp_in_V_data_V_U_ack_in : STD_LOGIC;
    signal regslice_both_arp_in_V_keep_V_U_apdone_blk : STD_LOGIC;
    signal arp_in_TKEEP_int_regslice : STD_LOGIC_VECTOR (63 downto 0);
    signal regslice_both_arp_in_V_keep_V_U_vld_out : STD_LOGIC;
    signal regslice_both_arp_in_V_keep_V_U_ack_in : STD_LOGIC;
    signal regslice_both_arp_in_V_strb_V_U_apdone_blk : STD_LOGIC;
    signal arp_in_TSTRB_int_regslice : STD_LOGIC_VECTOR (63 downto 0);
    signal regslice_both_arp_in_V_strb_V_U_vld_out : STD_LOGIC;
    signal regslice_both_arp_in_V_strb_V_U_ack_in : STD_LOGIC;
    signal regslice_both_arp_in_V_last_V_U_apdone_blk : STD_LOGIC;
    signal arp_in_TLAST_int_regslice : STD_LOGIC_VECTOR (0 downto 0);
    signal regslice_both_arp_in_V_last_V_U_vld_out : STD_LOGIC;
    signal regslice_both_arp_in_V_last_V_U_ack_in : STD_LOGIC;
    signal arp_interOut_TVALID_int_regslice : STD_LOGIC;
    signal arp_interOut_TREADY_int_regslice : STD_LOGIC;
    signal regslice_both_arp_interOut_V_data_V_U_vld_out : STD_LOGIC;
    signal regslice_both_arp_interOut_V_keep_V_U_apdone_blk : STD_LOGIC;
    signal regslice_both_arp_interOut_V_keep_V_U_ack_in_dummy : STD_LOGIC;
    signal regslice_both_arp_interOut_V_keep_V_U_vld_out : STD_LOGIC;
    signal regslice_both_arp_interOut_V_strb_V_U_apdone_blk : STD_LOGIC;
    signal regslice_both_arp_interOut_V_strb_V_U_ack_in_dummy : STD_LOGIC;
    signal regslice_both_arp_interOut_V_strb_V_U_vld_out : STD_LOGIC;
    signal regslice_both_arp_interOut_V_last_V_U_apdone_blk : STD_LOGIC;
    signal regslice_both_arp_interOut_V_last_V_U_ack_in_dummy : STD_LOGIC;
    signal regslice_both_arp_interOut_V_last_V_U_vld_out : STD_LOGIC;
    signal arp_out_TDATA_int_regslice : STD_LOGIC_VECTOR (511 downto 0);
    signal arp_out_TVALID_int_regslice : STD_LOGIC;
    signal arp_out_TREADY_int_regslice : STD_LOGIC;
    signal regslice_both_arp_out_V_data_V_U_vld_out : STD_LOGIC;
    signal regslice_both_arp_out_V_keep_V_U_apdone_blk : STD_LOGIC;
    signal regslice_both_arp_out_V_keep_V_U_ack_in_dummy : STD_LOGIC;
    signal regslice_both_arp_out_V_keep_V_U_vld_out : STD_LOGIC;
    signal regslice_both_arp_out_V_strb_V_U_apdone_blk : STD_LOGIC;
    signal regslice_both_arp_out_V_strb_V_U_ack_in_dummy : STD_LOGIC;
    signal regslice_both_arp_out_V_strb_V_U_vld_out : STD_LOGIC;
    signal regslice_both_arp_out_V_last_V_U_apdone_blk : STD_LOGIC;
    signal regslice_both_arp_out_V_last_V_U_ack_in_dummy : STD_LOGIC;
    signal regslice_both_arp_out_V_last_V_U_vld_out : STD_LOGIC;
    signal ap_condition_208 : BOOLEAN;
    signal ap_condition_204 : BOOLEAN;
    signal ap_ce_reg : STD_LOGIC;

    component startOfARP_regslice_both IS
    generic (
        DataWidth : INTEGER );
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        data_in : IN STD_LOGIC_VECTOR (DataWidth-1 downto 0);
        vld_in : IN STD_LOGIC;
        ack_in : OUT STD_LOGIC;
        data_out : OUT STD_LOGIC_VECTOR (DataWidth-1 downto 0);
        vld_out : OUT STD_LOGIC;
        ack_out : IN STD_LOGIC;
        apdone_blk : OUT STD_LOGIC );
    end component;



begin
    regslice_both_arp_in_V_data_V_U : component startOfARP_regslice_both
    generic map (
        DataWidth => 512)
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        data_in => arp_in_TDATA,
        vld_in => arp_in_TVALID,
        ack_in => regslice_both_arp_in_V_data_V_U_ack_in,
        data_out => arp_in_TDATA_int_regslice,
        vld_out => arp_in_TVALID_int_regslice,
        ack_out => arp_in_TREADY_int_regslice,
        apdone_blk => regslice_both_arp_in_V_data_V_U_apdone_blk);

    regslice_both_arp_in_V_keep_V_U : component startOfARP_regslice_both
    generic map (
        DataWidth => 64)
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        data_in => arp_in_TKEEP,
        vld_in => arp_in_TVALID,
        ack_in => regslice_both_arp_in_V_keep_V_U_ack_in,
        data_out => arp_in_TKEEP_int_regslice,
        vld_out => regslice_both_arp_in_V_keep_V_U_vld_out,
        ack_out => arp_in_TREADY_int_regslice,
        apdone_blk => regslice_both_arp_in_V_keep_V_U_apdone_blk);

    regslice_both_arp_in_V_strb_V_U : component startOfARP_regslice_both
    generic map (
        DataWidth => 64)
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        data_in => arp_in_TSTRB,
        vld_in => arp_in_TVALID,
        ack_in => regslice_both_arp_in_V_strb_V_U_ack_in,
        data_out => arp_in_TSTRB_int_regslice,
        vld_out => regslice_both_arp_in_V_strb_V_U_vld_out,
        ack_out => arp_in_TREADY_int_regslice,
        apdone_blk => regslice_both_arp_in_V_strb_V_U_apdone_blk);

    regslice_both_arp_in_V_last_V_U : component startOfARP_regslice_both
    generic map (
        DataWidth => 1)
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        data_in => arp_in_TLAST,
        vld_in => arp_in_TVALID,
        ack_in => regslice_both_arp_in_V_last_V_U_ack_in,
        data_out => arp_in_TLAST_int_regslice,
        vld_out => regslice_both_arp_in_V_last_V_U_vld_out,
        ack_out => arp_in_TREADY_int_regslice,
        apdone_blk => regslice_both_arp_in_V_last_V_U_apdone_blk);

    regslice_both_arp_interOut_V_data_V_U : component startOfARP_regslice_both
    generic map (
        DataWidth => 512)
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        data_in => tmp_data_V_2_reg_414,
        vld_in => arp_interOut_TVALID_int_regslice,
        ack_in => arp_interOut_TREADY_int_regslice,
        data_out => arp_interOut_TDATA,
        vld_out => regslice_both_arp_interOut_V_data_V_U_vld_out,
        ack_out => arp_interOut_TREADY,
        apdone_blk => regslice_both_arp_interOut_V_data_V_U_apdone_blk);

    regslice_both_arp_interOut_V_keep_V_U : component startOfARP_regslice_both
    generic map (
        DataWidth => 64)
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        data_in => tmp_keep_V_1_reg_419,
        vld_in => arp_interOut_TVALID_int_regslice,
        ack_in => regslice_both_arp_interOut_V_keep_V_U_ack_in_dummy,
        data_out => arp_interOut_TKEEP,
        vld_out => regslice_both_arp_interOut_V_keep_V_U_vld_out,
        ack_out => arp_interOut_TREADY,
        apdone_blk => regslice_both_arp_interOut_V_keep_V_U_apdone_blk);

    regslice_both_arp_interOut_V_strb_V_U : component startOfARP_regslice_both
    generic map (
        DataWidth => 64)
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        data_in => tmp_strb_V_1_reg_424,
        vld_in => arp_interOut_TVALID_int_regslice,
        ack_in => regslice_both_arp_interOut_V_strb_V_U_ack_in_dummy,
        data_out => arp_interOut_TSTRB,
        vld_out => regslice_both_arp_interOut_V_strb_V_U_vld_out,
        ack_out => arp_interOut_TREADY,
        apdone_blk => regslice_both_arp_interOut_V_strb_V_U_apdone_blk);

    regslice_both_arp_interOut_V_last_V_U : component startOfARP_regslice_both
    generic map (
        DataWidth => 1)
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        data_in => tmp_last_V_1_reg_429,
        vld_in => arp_interOut_TVALID_int_regslice,
        ack_in => regslice_both_arp_interOut_V_last_V_U_ack_in_dummy,
        data_out => arp_interOut_TLAST,
        vld_out => regslice_both_arp_interOut_V_last_V_U_vld_out,
        ack_out => arp_interOut_TREADY,
        apdone_blk => regslice_both_arp_interOut_V_last_V_U_apdone_blk);

    regslice_both_arp_out_V_data_V_U : component startOfARP_regslice_both
    generic map (
        DataWidth => 512)
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        data_in => arp_out_TDATA_int_regslice,
        vld_in => arp_out_TVALID_int_regslice,
        ack_in => arp_out_TREADY_int_regslice,
        data_out => arp_out_TDATA,
        vld_out => regslice_both_arp_out_V_data_V_U_vld_out,
        ack_out => arp_out_TREADY,
        apdone_blk => regslice_both_arp_out_V_data_V_U_apdone_blk);

    regslice_both_arp_out_V_keep_V_U : component startOfARP_regslice_both
    generic map (
        DataWidth => 64)
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        data_in => p_in_keep_V,
        vld_in => arp_out_TVALID_int_regslice,
        ack_in => regslice_both_arp_out_V_keep_V_U_ack_in_dummy,
        data_out => arp_out_TKEEP,
        vld_out => regslice_both_arp_out_V_keep_V_U_vld_out,
        ack_out => arp_out_TREADY,
        apdone_blk => regslice_both_arp_out_V_keep_V_U_apdone_blk);

    regslice_both_arp_out_V_strb_V_U : component startOfARP_regslice_both
    generic map (
        DataWidth => 64)
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        data_in => p_in_strb_V,
        vld_in => arp_out_TVALID_int_regslice,
        ack_in => regslice_both_arp_out_V_strb_V_U_ack_in_dummy,
        data_out => arp_out_TSTRB,
        vld_out => regslice_both_arp_out_V_strb_V_U_vld_out,
        ack_out => arp_out_TREADY,
        apdone_blk => regslice_both_arp_out_V_strb_V_U_apdone_blk);

    regslice_both_arp_out_V_last_V_U : component startOfARP_regslice_both
    generic map (
        DataWidth => 1)
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        data_in => p_in_last_V,
        vld_in => arp_out_TVALID_int_regslice,
        ack_in => regslice_both_arp_out_V_last_V_U_ack_in_dummy,
        data_out => arp_out_TLAST,
        vld_out => regslice_both_arp_out_V_last_V_U_vld_out,
        ack_out => arp_out_TREADY,
        apdone_blk => regslice_both_arp_out_V_last_V_U_apdone_blk);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_CS_fsm <= ap_ST_fsm_pp0_stage0;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                    ap_enable_reg_pp0_iter1 <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter2_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp0_iter2 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
                end if; 
            end if;
        end if;
    end process;


    current_state_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_boolean_1 = ap_condition_204)) then
                if ((current_state_load_load_fu_178_p1 = ap_const_lv1_1)) then 
                    current_state <= ap_const_lv1_0;
                elsif ((ap_const_boolean_1 = ap_condition_208)) then 
                    current_state <= ap_const_lv1_1;
                end if;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                current_state_load_reg_406 <= current_state;
                current_state_load_reg_406_pp0_iter1_reg <= current_state_load_reg_406;
                icmp_ln1065_1_reg_446_pp0_iter1_reg <= icmp_ln1065_1_reg_446;
                icmp_ln1065_reg_434_pp0_iter1_reg <= icmp_ln1065_reg_434;
                icmp_ln576_1_reg_442_pp0_iter1_reg <= icmp_ln576_1_reg_442;
                icmp_ln576_reg_438_pp0_iter1_reg <= icmp_ln576_reg_438;
                myIpAddress_read_reg_395 <= myIpAddress;
                myMacAddress_read_reg_400 <= myMacAddress;
                p_vld_reg_410_pp0_iter1_reg <= p_vld_reg_410;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (((icmp_ln576_fu_256_p2 = ap_const_lv1_0) and (icmp_ln1065_fu_236_p2 = ap_const_lv1_1) and (p_vld_fu_182_p1 = ap_const_lv1_1) and (current_state_load_load_fu_178_p1 = ap_const_lv1_0)) or ((icmp_ln576_1_fu_276_p2 = ap_const_lv1_0) and (icmp_ln1065_fu_236_p2 = ap_const_lv1_1) and (p_vld_fu_182_p1 = ap_const_lv1_1) and (current_state_load_load_fu_178_p1 = ap_const_lv1_0))))) then
                icmp_ln1065_1_reg_446 <= icmp_ln1065_1_fu_292_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (p_vld_fu_182_p1 = ap_const_lv1_1) and (current_state_load_load_fu_178_p1 = ap_const_lv1_0))) then
                icmp_ln1065_reg_434 <= icmp_ln1065_fu_236_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (icmp_ln576_fu_256_p2 = ap_const_lv1_1) and (icmp_ln1065_fu_236_p2 = ap_const_lv1_1) and (p_vld_fu_182_p1 = ap_const_lv1_1) and (current_state_load_load_fu_178_p1 = ap_const_lv1_0))) then
                icmp_ln576_1_reg_442 <= icmp_ln576_1_fu_276_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (icmp_ln1065_fu_236_p2 = ap_const_lv1_1) and (p_vld_fu_182_p1 = ap_const_lv1_1) and (current_state_load_load_fu_178_p1 = ap_const_lv1_0))) then
                icmp_ln576_reg_438 <= icmp_ln576_fu_256_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_logic_1 = ap_const_logic_1) and (p_vld_fu_182_p1 = ap_const_lv1_1) and (current_state_load_load_fu_178_p1 = ap_const_lv1_0))) then
                p_in_data_V <= arp_in_TDATA_int_regslice;
                p_in_keep_V <= arp_in_TKEEP_int_regslice;
                p_in_last_V <= arp_in_TLAST_int_regslice;
                p_in_strb_V <= arp_in_TSTRB_int_regslice;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (current_state_load_load_fu_178_p1 = ap_const_lv1_0))) then
                p_vld_reg_410 <= empty_nbread_fu_134_p5_0;
                tmp_data_V_2_reg_414 <= arp_in_TDATA_int_regslice;
                tmp_keep_V_1_reg_419 <= arp_in_TKEEP_int_regslice;
                tmp_last_V_1_reg_429 <= arp_in_TLAST_int_regslice;
                tmp_strb_V_1_reg_424 <= arp_in_TSTRB_int_regslice;
            end if;
        end if;
    end process;

    ap_NS_fsm_assign_proc : process (ap_CS_fsm, ap_block_pp0_stage0_subdone, ap_reset_idle_pp0)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_pp0_stage0 => 
                ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
            when others =>  
                ap_NS_fsm <= "X";
        end case;
    end process;
    ap_CS_fsm_pp0_stage0 <= ap_CS_fsm(0);
        ap_block_pp0_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_pp0_stage0_01001_assign_proc : process(ap_enable_reg_pp0_iter1, current_state_load_reg_406, ap_enable_reg_pp0_iter2, current_state_load_reg_406_pp0_iter1_reg, ap_predicate_op60_write_state2, ap_predicate_op72_write_state3, regslice_both_arp_interOut_V_data_V_U_apdone_blk, regslice_both_arp_out_V_data_V_U_apdone_blk, arp_interOut_TREADY_int_regslice, arp_out_TREADY_int_regslice)
    begin
                ap_block_pp0_stage0_01001 <= (((ap_enable_reg_pp0_iter2 = ap_const_logic_1) and ((regslice_both_arp_out_V_data_V_U_apdone_blk = ap_const_logic_1) or (regslice_both_arp_interOut_V_data_V_U_apdone_blk = ap_const_logic_1) or ((arp_interOut_TREADY_int_regslice = ap_const_logic_0) and (ap_predicate_op72_write_state3 = ap_const_boolean_1)) or ((current_state_load_reg_406_pp0_iter1_reg = ap_const_lv1_1) and (arp_out_TREADY_int_regslice = ap_const_logic_0)))) or ((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (((arp_interOut_TREADY_int_regslice = ap_const_logic_0) and (ap_predicate_op60_write_state2 = ap_const_boolean_1)) or ((current_state_load_reg_406 = ap_const_lv1_1) and (arp_out_TREADY_int_regslice = ap_const_logic_0)))));
    end process;


    ap_block_pp0_stage0_11001_assign_proc : process(ap_enable_reg_pp0_iter1, current_state_load_reg_406, ap_enable_reg_pp0_iter2, current_state_load_reg_406_pp0_iter1_reg, ap_predicate_op60_write_state2, ap_block_state2_io, ap_predicate_op72_write_state3, regslice_both_arp_interOut_V_data_V_U_apdone_blk, regslice_both_arp_out_V_data_V_U_apdone_blk, ap_block_state3_io, arp_interOut_TREADY_int_regslice, arp_out_TREADY_int_regslice)
    begin
                ap_block_pp0_stage0_11001 <= (((ap_enable_reg_pp0_iter2 = ap_const_logic_1) and ((ap_const_boolean_1 = ap_block_state3_io) or (regslice_both_arp_out_V_data_V_U_apdone_blk = ap_const_logic_1) or (regslice_both_arp_interOut_V_data_V_U_apdone_blk = ap_const_logic_1) or ((arp_interOut_TREADY_int_regslice = ap_const_logic_0) and (ap_predicate_op72_write_state3 = ap_const_boolean_1)) or ((current_state_load_reg_406_pp0_iter1_reg = ap_const_lv1_1) and (arp_out_TREADY_int_regslice = ap_const_logic_0)))) or ((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and ((ap_const_boolean_1 = ap_block_state2_io) or ((arp_interOut_TREADY_int_regslice = ap_const_logic_0) and (ap_predicate_op60_write_state2 = ap_const_boolean_1)) or ((current_state_load_reg_406 = ap_const_lv1_1) and (arp_out_TREADY_int_regslice = ap_const_logic_0)))));
    end process;


    ap_block_pp0_stage0_subdone_assign_proc : process(ap_enable_reg_pp0_iter1, current_state_load_reg_406, ap_enable_reg_pp0_iter2, current_state_load_reg_406_pp0_iter1_reg, ap_predicate_op60_write_state2, ap_block_state2_io, ap_predicate_op72_write_state3, regslice_both_arp_interOut_V_data_V_U_apdone_blk, regslice_both_arp_out_V_data_V_U_apdone_blk, ap_block_state3_io, arp_interOut_TREADY_int_regslice, arp_out_TREADY_int_regslice)
    begin
                ap_block_pp0_stage0_subdone <= (((ap_enable_reg_pp0_iter2 = ap_const_logic_1) and ((ap_const_boolean_1 = ap_block_state3_io) or (regslice_both_arp_out_V_data_V_U_apdone_blk = ap_const_logic_1) or (regslice_both_arp_interOut_V_data_V_U_apdone_blk = ap_const_logic_1) or ((arp_interOut_TREADY_int_regslice = ap_const_logic_0) and (ap_predicate_op72_write_state3 = ap_const_boolean_1)) or ((current_state_load_reg_406_pp0_iter1_reg = ap_const_lv1_1) and (arp_out_TREADY_int_regslice = ap_const_logic_0)))) or ((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and ((ap_const_boolean_1 = ap_block_state2_io) or ((arp_interOut_TREADY_int_regslice = ap_const_logic_0) and (ap_predicate_op60_write_state2 = ap_const_boolean_1)) or ((current_state_load_reg_406 = ap_const_lv1_1) and (arp_out_TREADY_int_regslice = ap_const_logic_0)))));
    end process;

        ap_block_state1_pp0_stage0_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_state2_io_assign_proc : process(current_state_load_reg_406, ap_predicate_op60_write_state2, arp_interOut_TREADY_int_regslice, arp_out_TREADY_int_regslice)
    begin
                ap_block_state2_io <= (((arp_interOut_TREADY_int_regslice = ap_const_logic_0) and (ap_predicate_op60_write_state2 = ap_const_boolean_1)) or ((current_state_load_reg_406 = ap_const_lv1_1) and (arp_out_TREADY_int_regslice = ap_const_logic_0)));
    end process;


    ap_block_state2_pp0_stage0_iter1_assign_proc : process(current_state_load_reg_406, ap_predicate_op60_write_state2, arp_interOut_TREADY_int_regslice, arp_out_TREADY_int_regslice)
    begin
                ap_block_state2_pp0_stage0_iter1 <= (((arp_interOut_TREADY_int_regslice = ap_const_logic_0) and (ap_predicate_op60_write_state2 = ap_const_boolean_1)) or ((current_state_load_reg_406 = ap_const_lv1_1) and (arp_out_TREADY_int_regslice = ap_const_logic_0)));
    end process;


    ap_block_state3_io_assign_proc : process(current_state_load_reg_406_pp0_iter1_reg, ap_predicate_op72_write_state3, arp_interOut_TREADY_int_regslice, arp_out_TREADY_int_regslice)
    begin
                ap_block_state3_io <= (((arp_interOut_TREADY_int_regslice = ap_const_logic_0) and (ap_predicate_op72_write_state3 = ap_const_boolean_1)) or ((current_state_load_reg_406_pp0_iter1_reg = ap_const_lv1_1) and (arp_out_TREADY_int_regslice = ap_const_logic_0)));
    end process;


    ap_block_state3_pp0_stage0_iter2_assign_proc : process(current_state_load_reg_406_pp0_iter1_reg, ap_predicate_op72_write_state3, regslice_both_arp_interOut_V_data_V_U_apdone_blk, regslice_both_arp_out_V_data_V_U_apdone_blk, arp_interOut_TREADY_int_regslice, arp_out_TREADY_int_regslice)
    begin
                ap_block_state3_pp0_stage0_iter2 <= ((regslice_both_arp_out_V_data_V_U_apdone_blk = ap_const_logic_1) or (regslice_both_arp_interOut_V_data_V_U_apdone_blk = ap_const_logic_1) or ((arp_interOut_TREADY_int_regslice = ap_const_logic_0) and (ap_predicate_op72_write_state3 = ap_const_boolean_1)) or ((current_state_load_reg_406_pp0_iter1_reg = ap_const_lv1_1) and (arp_out_TREADY_int_regslice = ap_const_logic_0)));
    end process;


    ap_condition_204_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001)
    begin
                ap_condition_204 <= ((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_logic_1 = ap_const_logic_1));
    end process;


    ap_condition_208_assign_proc : process(current_state_load_load_fu_178_p1, p_vld_fu_182_p1, icmp_ln1065_fu_236_p2, icmp_ln576_fu_256_p2, icmp_ln576_1_fu_276_p2, icmp_ln1065_1_fu_292_p2)
    begin
                ap_condition_208 <= (((icmp_ln1065_1_fu_292_p2 = ap_const_lv1_1) and (icmp_ln576_fu_256_p2 = ap_const_lv1_0) and (icmp_ln1065_fu_236_p2 = ap_const_lv1_1) and (p_vld_fu_182_p1 = ap_const_lv1_1) and (current_state_load_load_fu_178_p1 = ap_const_lv1_0)) or ((icmp_ln1065_1_fu_292_p2 = ap_const_lv1_1) and (icmp_ln576_1_fu_276_p2 = ap_const_lv1_0) and (icmp_ln1065_fu_236_p2 = ap_const_lv1_1) and (p_vld_fu_182_p1 = ap_const_lv1_1) and (current_state_load_load_fu_178_p1 = ap_const_lv1_0)));
    end process;

    ap_enable_pp0 <= (ap_idle_pp0 xor ap_const_logic_1);

    ap_idle_pp0_assign_proc : process(ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter2)
    begin
        if (((ap_enable_reg_pp0_iter2 = ap_const_logic_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_const_logic_1 = ap_const_logic_0))) then 
            ap_idle_pp0 <= ap_const_logic_1;
        else 
            ap_idle_pp0 <= ap_const_logic_0;
        end if; 
    end process;


    ap_predicate_op60_write_state2_assign_proc : process(current_state_load_reg_406, p_vld_reg_410, icmp_ln1065_1_reg_446, icmp_ln576_reg_438, icmp_ln576_1_reg_442, icmp_ln1065_reg_434)
    begin
                ap_predicate_op60_write_state2 <= ((((icmp_ln576_1_reg_442 = ap_const_lv1_1) and (icmp_ln576_reg_438 = ap_const_lv1_1) and (p_vld_reg_410 = ap_const_lv1_1) and (current_state_load_reg_406 = ap_const_lv1_0)) or ((icmp_ln1065_1_reg_446 = ap_const_lv1_0) and (p_vld_reg_410 = ap_const_lv1_1) and (current_state_load_reg_406 = ap_const_lv1_0))) or ((icmp_ln1065_reg_434 = ap_const_lv1_0) and (p_vld_reg_410 = ap_const_lv1_1) and (current_state_load_reg_406 = ap_const_lv1_0)));
    end process;


    ap_predicate_op72_write_state3_assign_proc : process(current_state_load_reg_406_pp0_iter1_reg, p_vld_reg_410_pp0_iter1_reg, icmp_ln1065_1_reg_446_pp0_iter1_reg, icmp_ln576_reg_438_pp0_iter1_reg, icmp_ln576_1_reg_442_pp0_iter1_reg, icmp_ln1065_reg_434_pp0_iter1_reg)
    begin
                ap_predicate_op72_write_state3 <= ((((icmp_ln576_1_reg_442_pp0_iter1_reg = ap_const_lv1_1) and (icmp_ln576_reg_438_pp0_iter1_reg = ap_const_lv1_1) and (p_vld_reg_410_pp0_iter1_reg = ap_const_lv1_1) and (current_state_load_reg_406_pp0_iter1_reg = ap_const_lv1_0)) or ((icmp_ln1065_1_reg_446_pp0_iter1_reg = ap_const_lv1_0) and (p_vld_reg_410_pp0_iter1_reg = ap_const_lv1_1) and (current_state_load_reg_406_pp0_iter1_reg = ap_const_lv1_0))) or ((icmp_ln1065_reg_434_pp0_iter1_reg = ap_const_lv1_0) and (p_vld_reg_410_pp0_iter1_reg = ap_const_lv1_1) and (current_state_load_reg_406_pp0_iter1_reg = ap_const_lv1_0)));
    end process;

    ap_reset_idle_pp0 <= ap_const_logic_0;

    ap_rst_n_inv_assign_proc : process(ap_rst_n)
    begin
                ap_rst_n_inv <= not(ap_rst_n);
    end process;

    arp_in_TREADY <= regslice_both_arp_in_V_data_V_U_ack_in;

    arp_in_TREADY_int_regslice_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001, current_state_load_load_fu_178_p1, arp_in_TVALID_int_regslice)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (arp_in_TVALID_int_regslice = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_logic_1 = ap_const_logic_1) and (current_state_load_load_fu_178_p1 = ap_const_lv1_0))) then 
            arp_in_TREADY_int_regslice <= ap_const_logic_1;
        else 
            arp_in_TREADY_int_regslice <= ap_const_logic_0;
        end if; 
    end process;


    arp_interOut_TDATA_blk_n_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0, current_state_load_reg_406, p_vld_reg_410, icmp_ln1065_1_reg_446, icmp_ln576_reg_438, icmp_ln576_1_reg_442, icmp_ln1065_reg_434, ap_enable_reg_pp0_iter2, current_state_load_reg_406_pp0_iter1_reg, p_vld_reg_410_pp0_iter1_reg, icmp_ln1065_1_reg_446_pp0_iter1_reg, icmp_ln576_reg_438_pp0_iter1_reg, icmp_ln576_1_reg_442_pp0_iter1_reg, icmp_ln1065_reg_434_pp0_iter1_reg, arp_interOut_TREADY_int_regslice)
    begin
        if ((((ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0) and ((((icmp_ln576_1_reg_442_pp0_iter1_reg = ap_const_lv1_1) and (icmp_ln576_reg_438_pp0_iter1_reg = ap_const_lv1_1) and (p_vld_reg_410_pp0_iter1_reg = ap_const_lv1_1) and (current_state_load_reg_406_pp0_iter1_reg = ap_const_lv1_0)) or ((icmp_ln1065_1_reg_446_pp0_iter1_reg = ap_const_lv1_0) and (p_vld_reg_410_pp0_iter1_reg = ap_const_lv1_1) and (current_state_load_reg_406_pp0_iter1_reg = ap_const_lv1_0))) or ((icmp_ln1065_reg_434_pp0_iter1_reg = ap_const_lv1_0) and (p_vld_reg_410_pp0_iter1_reg = ap_const_lv1_1) and (current_state_load_reg_406_pp0_iter1_reg = ap_const_lv1_0)))) or ((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and ((((icmp_ln576_1_reg_442 = ap_const_lv1_1) and (icmp_ln576_reg_438 = ap_const_lv1_1) and (p_vld_reg_410 = ap_const_lv1_1) and (current_state_load_reg_406 = ap_const_lv1_0)) or ((icmp_ln1065_1_reg_446 = ap_const_lv1_0) and (p_vld_reg_410 = ap_const_lv1_1) and (current_state_load_reg_406 = ap_const_lv1_0))) or ((icmp_ln1065_reg_434 = ap_const_lv1_0) and (p_vld_reg_410 = ap_const_lv1_1) and (current_state_load_reg_406 = ap_const_lv1_0)))))) then 
            arp_interOut_TDATA_blk_n <= arp_interOut_TREADY_int_regslice;
        else 
            arp_interOut_TDATA_blk_n <= ap_const_logic_1;
        end if; 
    end process;

    arp_interOut_TVALID <= regslice_both_arp_interOut_V_data_V_U_vld_out;

    arp_interOut_TVALID_int_regslice_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_predicate_op60_write_state2, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_predicate_op60_write_state2 = ap_const_boolean_1))) then 
            arp_interOut_TVALID_int_regslice <= ap_const_logic_1;
        else 
            arp_interOut_TVALID_int_regslice <= ap_const_logic_0;
        end if; 
    end process;


    arp_out_TDATA_blk_n_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0, current_state_load_reg_406, ap_enable_reg_pp0_iter2, current_state_load_reg_406_pp0_iter1_reg, arp_out_TREADY_int_regslice)
    begin
        if ((((current_state_load_reg_406_pp0_iter1_reg = ap_const_lv1_1) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0)) or ((current_state_load_reg_406 = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0)))) then 
            arp_out_TDATA_blk_n <= arp_out_TREADY_int_regslice;
        else 
            arp_out_TDATA_blk_n <= ap_const_logic_1;
        end if; 
    end process;

    arp_out_TDATA_int_regslice <= (p_Result_1_fu_351_p5(511 downto 336) & tmp_6_fu_372_p5 & p_Result_1_fu_351_p5(159 downto 0));
    arp_out_TVALID <= regslice_both_arp_out_V_data_V_U_vld_out;

    arp_out_TVALID_int_regslice_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, current_state_load_reg_406, ap_block_pp0_stage0_11001)
    begin
        if (((current_state_load_reg_406 = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            arp_out_TVALID_int_regslice <= ap_const_logic_1;
        else 
            arp_out_TVALID_int_regslice <= ap_const_logic_0;
        end if; 
    end process;

    current_state_load_load_fu_178_p1 <= current_state;
    empty_nbread_fu_134_p5_0 <= (0=>(arp_in_TVALID_int_regslice), others=>'-');
    icmp_ln1065_1_fu_292_p2 <= "1" when (tmp_3_fu_282_p4 = myIpAddress) else "0";
    icmp_ln1065_fu_236_p2 <= "1" when (tmp_s_fu_226_p4 = ap_const_lv16_100) else "0";
    icmp_ln576_1_fu_276_p2 <= "1" when (tmp_2_fu_262_p4 = trunc_ln674_1_fu_272_p1) else "0";
    icmp_ln576_fu_256_p2 <= "1" when (tmp_1_fu_242_p4 = trunc_ln674_fu_252_p1) else "0";
    p_Result_1_fu_351_p5 <= (p_Result_s_fu_339_p5(511 downto 96) & myMacAddress_read_reg_400 & p_Result_s_fu_339_p5(47 downto 0));
    p_Result_s_fu_339_p5 <= (p_in_data_V(511 downto 48) & tmp_fu_329_p4);
    p_vld_fu_182_p1 <= empty_nbread_fu_134_p5_0;
    tmp_1_fu_242_p4 <= arp_in_TDATA_int_regslice(210 downto 176);
    tmp_2_fu_262_p4 <= arp_in_TDATA_int_regslice(242 downto 224);
    tmp_3_fu_282_p4 <= arp_in_TDATA_int_regslice(335 downto 304);
    tmp_5_fu_362_p4 <= p_in_data_V(255 downto 176);
    tmp_6_fu_372_p5 <= (((tmp_5_fu_362_p4 & myIpAddress_read_reg_395) & myMacAddress_read_reg_400) & ap_const_lv16_200);
    tmp_fu_329_p4 <= p_in_data_V(95 downto 48);
    tmp_s_fu_226_p4 <= arp_in_TDATA_int_regslice(175 downto 160);
    trunc_ln674_1_fu_272_p1 <= myIpAddress(19 - 1 downto 0);
    trunc_ln674_fu_252_p1 <= myMacAddress(35 - 1 downto 0);
end behav;
